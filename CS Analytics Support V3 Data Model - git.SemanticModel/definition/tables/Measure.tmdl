table Measure
	lineageTag: 01e9c679-abdb-441f-8634-2317f5a7c2cf

	measure 'Is metric Filtered' = ```
			
			IF (
			    CALCULATE (
			        DISTINCTCOUNT ( DimSHIMeasures[Metric ] ),
			        ALLSELECTED ( DimSHIMeasures[Metric ] )
			    ) = 1,
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: d12f7cae-4e72-4802-bea0-ffd84f39eab8

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure Team = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Technical"
			        || SELECTEDVALUE ( DimTeam[Team] ) = "Security & Revenue Support"
			        || SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard"
			        || SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus"
			        || SELECTEDVALUE ( DimTeam[Team] ) = "Enterprise",
			    MAX ( DimTeam[Team] ),
			    BLANK ()
			)
			
			```
		displayFolder: SHI Measures V2
		lineageTag: 4d6b10f1-30d9-4256-adb0-a8ed3bfea598

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure Sample = ```
			
			"Detailed view for "
			
			```
		displayFolder: Headcount Measures
		lineageTag: 44b0692a-fa90-41c9-9aba-412f44faa6b8

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure Good = ```
			
			80
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: ac111781-646b-43c4-befa-4828a6fe7d3d

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure Max = ```
			
			100
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 43f3302c-5368-4c89-9375-e6137d34db55

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure Min = ```
			
			0
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 9635d43b-d7f0-451f-a41b-b8e8affacf30

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Inquiry resolved (Satisfied)' = ```
			
			DIVIDE (
			    CALCULATE (
			        COUNT ( DimTicketCsatSurvey[Survey ID] ),
			        FactTicketCsatSurvey[Inquiry Resolved] = TRUE
			    ),
			    CALCULATE (
			        COUNT ( DimTicketCsatSurvey[Survey ID] ),
			        FactTicketCsatSurvey[Inquiry Resolved] = TRUE
			            || FactTicketCsatSurvey[Inquiry Resolved] = FALSE
			    )
			        - CALCULATE (
			            COUNT ( DimTicketCsatSurvey[Survey ID] ),
			            ISBLANK ( FactTicketCsatSurvey[Inquiry Resolved] )
			        )
			)
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: CSAT Measures
		lineageTag: 9c10ac01-9b55-4691-a787-103d46767209

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Survey Response Rate' = ```
			
			DIVIDE (
			    COUNT ( FactTicketCsatSurvey[Experience CSAT] ),
			    COUNT ( DimTicketCsatSurvey[Survey ID] )
			)
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: CSAT Measures
		lineageTag: 2402b0e4-cbbd-4e41-9266-d46fca975ed7

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Full Resolution Time in Days Calendar' = ```
			
			DIVIDE (
			    DIVIDE ( SUM ( FactTicket[Full Resolution Time in Minutes Calendar] ), 60 ),
			    24
			)
			
			```
		formatString: #,0.00
		displayFolder: Time Measures
		lineageTag: bae30de8-70c3-4c66-a5ef-41dabf01880c

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Full Resolution Time in Days Calendar' = ```
			
			DIVIDE (
			    DIVIDE ( AVERAGE ( FactTicket[Full Resolution Time in Minutes Calendar] ), 60 ),
			    24
			)
			
			```
		formatString: #,0.00
		displayFolder: Average Measures
		lineageTag: 7ad9a81e-09a6-4f86-ade5-7f9124ec6f3f

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Ramped Capacity' = ```
			
			    VAR CurrentYearMonth =
			    CALCULATE (
			        MAX ( CalendarDate[Year Month] ),
			        ALL ( CalendarDate ),
			        CalendarDate[Date] = EOMONTH ( TODAY (), 0 )
			    )
			VAR CurrentRampedCapacity =
			    CALCULATE (
			        [Ramped Capacity Updated],
			        ALL ( CalendarDate ),
			        CalendarDate[Year Month] = CurrentYearMonth
			    )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) > CurrentYearMonth,
			        CurrentRampedCapacity,
			        [Ramped Capacity Updated]
			    )
			```
		displayFolder: Headcount Measures
		lineageTag: 4a780b40-db35-4cdc-9ccc-3e780ea20c33

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'HC to Support Forecast' =
			
			IF(MAX(CalendarDate[Year Month]) > 202408,
			    IF(MAX(DimTeam[Team]) IN {"Enterprise", "Premium Standard"},
			        CALCULATE( [HC to Support Forecast (Old)], ALL(DimTeam), DimTeam[Team] = "Enterprise") + CALCULATE( [HC to Support Forecast (Old)], ALL(DimTeam), DimTeam[Team] = "Premium Standard"),
			        [HC to Support Forecast (Old)]
			    ),
			    [HC to Support Forecast (Old)]
			)
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 05ea791b-f954-44e3-b9ba-4effad9fed2d

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Updated Ticket Count' = ```
			
			CALCULATE (
			    DISTINCTCOUNT ( FactTicket[ticket_id] ),
			    USERELATIONSHIP ( FactTicket[updated_date], 'CalendarDate'[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Average Measures
		lineageTag: 581701c6-901a-4efe-864e-32de2664bcda

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Ticket Comment 30 Day Rolling Average' = ```
			
			IF (
			    ISFILTERED ( CalendarDate[Date] ),
			    VAR __LAST_DATE =
			        LASTDATE ( CalendarDate[Date] )
			    RETURN
			        AVERAGEX (
			            DATESBETWEEN (
			                CalendarDate[Date],
			                DATEADD ( __LAST_DATE, -30, DAY ),
			                DATEADD ( __LAST_DATE, 30, DAY )
			            ),
			            CALCULATE ( [Comment Count] )
			        )
			)
			
			```
		formatString: #,0
		displayFolder: Average Measures
		lineageTag: d7525b7b-e401-4c26-9d99-352c97146b5a

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support CSAT 30 Day Moving Average' = ```
			
			VAR __Calc =
			    IF (
			        ISFILTERED ( CalendarDate[Fiscal Year] ),
			        ERROR ( "Time intelligence quick measures can only be grouped or filtered by the Power BI-provided date hierarchy or primary date column." ),
			        VAR __LAST_DATE =
			            LASTDATE ( CalendarDate[Date] )
			        RETURN
			            AVERAGEX (
			                DATESBETWEEN (
			                    CalendarDate[Date],
			                    DATEADD ( __LAST_DATE, -29, DAY ),
			                    __LAST_DATE
			                ),
			                CALCULATE ( [Support CSAT] )
			            )
			    )
			RETURN
			    IF ( MAX ( CalendarDate[Date] ) > TODAY (), BLANK (), __Calc )
			
			```
		formatString: #,0.00
		displayFolder: Average Measures
		lineageTag: 9f339532-7fa4-4eaa-997c-bc949a16dfdb

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'CSAT IC Responses Count' = ```
			
			COUNT ( FactTicketCsatSurvey[Engineer CSAT] )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 59aff09a-b22b-447a-a6d4-38942b6463b1

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	/// How Many Comments a ticket has (based on comment created date)
	/// 
	measure 'Comment Count' =
			
			CALCULATE (
			    COUNT ( FactTicketComment[comment_id] ),
			    USERELATIONSHIP ( FactTicketComment[Ticket Comment Date], CalendarDate[Date] ),
			    USERELATIONSHIP ( DimTicket[Ticket ID], FactTicketComment[ticket_id]),
			    USERELATIONSHIP ( DimAssignee[Zendesk User ID], FactTicketComment[author_zendesk_id] ),
			    USERELATIONSHIP(DimProductTicketBridge[Ticket ID],FactTicketComment[ticket_id]
			))
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 062f2b9c-b1b4-413f-a83c-f0171c7e6202

		changedProperty = IsHidden

	measure 'Open Tickets' = ```
			
			SUM ( DailySupportTicketsBacklogCount[Open Tickets] )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: c3b20b81-fade-408b-a7d8-306dea14a5b1

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_DUPLICATE_MEASURES","OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Created Ticket Count' = ```
			
			CALCULATE ( COUNT ( FactTicket[ticket_id] ) )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: ae42a498-c0b8-4234-902d-f9196c6e3541

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT Survey Responses Count' = ```
			
			CALCULATE (
			    COUNT ( FactTicketCsatSurvey[Experience CSAT] ),
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: e13f0a6d-4c53-4f21-82a4-31ea07d2568b

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Ticket Solved' = ```
			
			DIVIDE ( [Solved Ticket Count], SUM ( CalendarDate[Is Business Day?] ) )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 980266f1-3755-4a22-bcd2-fba468c2a085

		changedProperty = IsHidden

		annotation PBI_FormatHint = {"isDecimal":true}

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Solved Ticket Count' = ```
			
			CALCULATE (
			    COUNT ( FactTicket[ticket_id] ),
			    DimTicket[Status] = "Closed",
			    USERELATIONSHIP ( FactTicket[Solved Date], 'CalendarDate'[date] )
			)
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 68800d09-ee2d-41b1-a518-91c5a2ef1d2d

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Median Reply Time in Hours Calendar' = ```
			
			DIVIDE ( MEDIAN ( FactTicket[reply_time_in_minutes_calendar] ), 60 )
			
			```
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: 51f274ea-c66e-4d4d-aed6-18e0dcf04846

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Median Reply Time in Minutes Calendar' = ```
			
			MEDIAN ( FactTicket[reply_time_in_minutes_calendar] )
			
			```
		formatString: #,0
		displayFolder: Median Measures
		lineageTag: 08a0be7d-3919-40d0-921a-dd638ff10087

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Median Full Resolution Time in Days Calendar' = ```
			
			CALCULATE(
			    DIVIDE (
			    [Median Full Resolution Time in Hours Calendar],
			    24
			) , USERELATIONSHIP(CalendarDate[Date], FactTicket[Solved Date] )
			
			)
			
			
			
			```
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: ceae493b-d31e-4c0b-adb8-c1461e8f8622

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Forecast Variance' = ```
			
			VAR tickets_forecasted =
			    SUM ( FactFCPMonthlyTeamForecast[Tickets Forecasted] )
			VAR number_tickets =
			    [Ticket Count]
			RETURN
			    IF (
			        tickets_forecasted > number_tickets,
			        DIVIDE ( tickets_forecasted - number_tickets, tickets_forecasted ),
			        DIVIDE ( number_tickets - tickets_forecasted, tickets_forecasted )
			    )
			
			```
		formatString: #,0.0%;-#,0.0%;#,0.0%
		displayFolder: Headcount Measures
		lineageTag: 814a85d0-5540-4939-95d4-d8775f248969

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Var to Required Capacity' =
			
			IF(MAX(CalendarDate[Year Month]) > 202408,
			    IF(MAX(DimTeam[Team]) IN {"Enterprise", "Premium Standard"},
			        CALCULATE( [Var to Required Capacity (Old)], ALL(DimTeam), DimTeam[Team] = "Enterprise") + CALCULATE( [Var to Required Capacity (Old)], ALL(DimTeam), DimTeam[Team] = "Premium Standard"),
			        [Var to Required Capacity (Old)]
			    ),
			    [Var to Required Capacity (Old)]
			)
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Headcount Measures
		lineageTag: 5b5499f0-7c49-4684-90eb-12c3965a9fc3

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Ticket Capacity' = ```
			
			VAR Denominator =
			    IFERROR (
			        DIVIDE(SUM ( FactFCPMonthlyTeamForecast[Tickets Forecasted] ), [HC to Support Forecast]),
			        BLANK ()
			    )
			RETURN
			    [Ramped Capacity] * Denominator
			
			```
		displayFolder: Headcount Measures
		lineageTag: f0ff61a3-3e1d-4c90-977a-ec894cfb45ca

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_USING_THE_IFERROR_FUNCTION","OBJECTS_WITH_NO_DESCRIPTION"]}

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Initial Response Met for Urgent Tickets. Only applicable to Enterprise and Premium Tickets
	measure '% IR Met Urgent' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard",
			    VAR IRSatisfied =
			        CALCULATE (
			            [Ticket Count],
			            KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			            KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    VAR IRBlank =
			        CALCULATE (
			            [Ticket Count],
			            NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			            KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    RETURN
			        DIVIDE ( IRSatisfied, IRBlank ),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        RETURN
			            DIVIDE ( IRSatisfied, IRBlank ),
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count],
			                DimTicket[Is Initial Response Met] = TRUE,
			                DimTicket[First Priority] = "urgent",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                DimTicket[First Priority] = "urgent",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        RETURN
			            DIVIDE ( IRSatisfied, IRBlank )
			    )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: IR Measures
		lineageTag: fe3bae1e-4861-40f3-92b9-6deeab1e38b3

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["PERCENTAGE_FORMATTING"]}

	/// Initial Response Met for High Tickets. Only applicable to Enterprise and Premium Tickets
	measure '% IR Met High' =
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard",
			    VAR IRSatisfied =
			      CALCULATE (
			            [Ticket Count],
			            KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			            KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    VAR IRBlank =
			        CALCULATE (
			            [Ticket Count],
			            NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			            KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    RETURN
			        ROUND(DIVIDE ( IRSatisfied,  IRBlank ),2),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			        VAR IRSatisfied =
			          CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        VAR IRBlank =
			           CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        RETURN
			            ROUND(DIVIDE ( IRSatisfied, IRBlank ),2),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Enterprise",
			        VAR IRSatisfied =
			          CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( NOT ( DimTicketTag[Tag Name]
			            IN {
			                "closed_by_merge"
			            } ) ),
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        VAR IRBlank =
			           CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( NOT ( DimTicketTag[Tag Name]
			            IN {
			                "closed_by_merge"
			            } ) ),
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        RETURN
			            ROUND(DIVIDE ( IRSatisfied, IRBlank ),2),
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count],
			                DimTicket[Is Initial Response Met] = TRUE,
			                DimTicket[First Priority] = "high",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        VAR IRBlank =
			       CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                DimTicket[First Priority] = "high",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        RETURN
			        ROUND( DIVIDE ( IRSatisfied, IRBlank ),2)
			    )
			)
			)
		formatString: #,0%;-#,0%;#,0%
		displayFolder: IR Measures
		lineageTag: 9118fec7-d696-44bc-b38b-db1109ea3dd0

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["PERCENTAGE_FORMATTING"]}

	measure 'IC CSAT' = ```
			
			DIVIDE (
			    ( [IC CSAT 1 Star Count] * 1 + [IC CSAT 2 Star Count] * 2 + [IC CSAT 3 Star Count] * 3 + [IC CSAT 4 Star Count] * 4 + [IC CSAT 5 Star Count] * 5 ),
			    [CSAT IC Responses Count]
			)
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: bc98feb3-0d93-4160-afc4-d651e7eb589d

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'IC CSAT 5 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( FactTicketCsatSurvey ),
			    ALL ( FactTicketCsatSurvey[Engineer CSAT] ),
			    FactTicketCsatSurvey[Engineer CSAT] = 5
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 10675cb0-d232-430a-9ca1-13ec3243e6d2

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IC CSAT 4 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( FactTicketCsatSurvey ),
			    ALL ( FactTicketCsatSurvey[Engineer CSAT] ),
			    FactTicketCsatSurvey[Engineer CSAT] = 4
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 2622a330-431b-464a-8fbd-94d6b806f612

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IC CSAT 3 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( FactTicketCsatSurvey ),
			    ALL ( FactTicketCsatSurvey[Engineer CSAT] ),
			    FactTicketCsatSurvey[Engineer CSAT] = 3
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 44eed042-e837-47c2-a1d2-ac9ec5a52a26

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IC CSAT 2 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( FactTicketCsatSurvey ),
			    ALL ( FactTicketCsatSurvey[Engineer CSAT] ),
			    FactTicketCsatSurvey[Engineer CSAT] = 2
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 7591dbcc-e345-46be-b77b-7df28bb51029

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IC CSAT 1 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( FactTicketCsatSurvey ),
			    ALL ( FactTicketCsatSurvey[Engineer CSAT] ),
			    FactTicketCsatSurvey[Engineer CSAT] = 1
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: f65a4258-df9b-468e-82b6-f7db2fb2d048

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Median Full Resolution Time in Hours Calendar' =
			
			CALCULATE(
			    DIVIDE ( MEDIAN ( FactTicket[Full Resolution Time in Minutes Calendar] ), 60 )
			    , USERELATIONSHIP(CalendarDate[Date],FactTicket[Solved Date]
			)
			)
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: 6c3f1e17-c2a8-4f1b-a631-584ca50066d4

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_DUPLICATE_MEASURES","OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Median Full Resolution Time in Minutes Calendar' = ```
			
			CALCULATE(
			    DIVIDE (
			     MEDIAN ( FactTicket[Full Resolution Time in Minutes Calendar] ), 60
			    ), USERELATIONSHIP(CalendarDate[Date], FactTicket[Solved Date])
			) 
			
			```
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: fe09ce27-a1b3-4499-be4f-c418035cb8bf

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_DUPLICATE_MEASURES","OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Seats / 1000' = ```
			
			DIVIDE(SUM ( FactFCPMonthlyTeamUserSeats[User/Seat] ), 1000)
			
			```
		formatString: #,0.00
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 81390495-af22-4ea1-bde4-36070b5fff3b

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Second Last Closed Month Ticket Count' = ```
			
			CALCULATE (
			    COUNT ( DimTicket[Ticket ID] ),
			    'CalendarDate'[Is Second Closed Month] = TRUE ()
			)
			
			```
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: 4b1b8b12-bd3f-499b-a1dd-90d61ed767e1

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	/// Calculates the average ticket count over the last 7 days, taking into account the date the ticket was created.
	measure '7 Day Moving AVG' = ```
			
			IF (
			    ISFILTERED ( FactTicket[Created At] ),
			    ERROR ( "Time intelligence quick measures can only be grouped or filtered by the Power BI provided date hierarchy or primary date column." ),
			    VAR __LAST_DATE =
			        LASTDATE ( CalendarDate[Date] )
			    RETURN
			        AVERAGEX (
			            FILTER (
			                DATESBETWEEN (
			                    CalendarDate[Date],
			                    DATEADD ( __LAST_DATE, -6, DAY ),
			                    __LAST_DATE
			                ),
			                MAX ( FactTicket[Created At] ) >= MAX ( CalendarDate[Date] )
			            ),
			            CALCULATE ( [Ticket Count] )
			        )
			)
			
			```
		formatString: #,0
		displayFolder: Average Measures
		lineageTag: 69e5d434-dad1-47ea-88a3-a163637122a1

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Days To Clear Backlog' = ```
			
			IF (
			    NOT ( ISINSCOPE ( FactTicket[Created Date] ) ),
			    DIVIDE ( [Backlog Last day Month], [Average Ticket Solved] )
			)
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 8ed57908-5aad-4885-ae2b-d39e04a6d037

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support CSAT' = ```
			
			CALCULATE (
			    DIVIDE (
			        ( [CSAT 1 Star Count] * 1 + [CSAT 2 Star Count] * 2 + [CSAT 3 Star Count] * 3 + [CSAT 4 Star Count] * 4 + [CSAT 5 Star Count] * 5 ),
			        [CSAT Survey Responses Count]
			    ),
			    KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			        IN {
			            "Security & Revenue Support::Refer to Sales",
			            "Security & Revenue Support::Refer to Finance",
			            "Refer to Sales",
			            "Refer to Finance"
			        } ) )
			)
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: 911c5044-f3c1-406b-8865-68eded41de0a

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'CSAT 5 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( DimTicketCsatSurvey ),
			    FactTicketCsatSurvey[Experience CSAT] = 5,
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 9568eea7-d3e0-45ed-b58a-7d2360e27f2d

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT 4 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( DimTicketCsatSurvey ),
			    FactTicketCsatSurvey[Experience CSAT] = 4,
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: e9fca4a4-b2f5-491c-9443-615b08cab002

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT 3 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( DimTicketCsatSurvey ),
			    FactTicketCsatSurvey[Experience CSAT] = 3,
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: a48224bd-9c14-4c5b-a59a-b10346eafc29

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT 2 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( DimTicketCsatSurvey ),
			    FactTicketCsatSurvey[Experience CSAT] = 2,
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 9654af27-4cd9-4545-84af-76c98d12231e

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT 1 Star Count' = ```
			
			CALCULATE (
			    COUNTROWS ( DimTicketCsatSurvey ),
			    FactTicketCsatSurvey[Experience CSAT] = 1,
			    USERELATIONSHIP ( FactTicketCsatSurvey[Survey Sent Date], CalendarDate[Date] )
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 713807a6-1184-4c00-a8df-e3db56a69494

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Backlog Last day Month' = ```
			
			CALCULATE ( [Total Backlog], ENDOFMONTH ( 'CalendarDate'[Date] ) )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 2790ee2b-077e-411c-88c1-5c88544527e8

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Total Backlog' = ```
			
			CALCULATE (
			    SUM ( DailySupportTicketsBacklogCount[Open Tickets] ),
			    OR (
			        DailySupportTicketsBacklogCount[Backlog Status] = "Open",
			        DailySupportTicketsBacklogCount[Backlog Status] = "New"
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: f564284e-a3a0-497a-84a8-0384ca6e14b3

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	/// Initial Response Met for Support Tickets. 
	measure '% IR Met' = ```
			
			VAR IRSatisfied =
			    CALCULATE (
			        [Ticket Count],
			        DimTicket[Is Initial Response Met] = TRUE,
			        DimTicket[Is  Initial Response Eligible] = TRUE
			    )
			VAR IRBlank =
			    CALCULATE (
			        [Ticket Count],
			        NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			        DimTicket[Is  Initial Response Eligible] = TRUE
			    )
			RETURN
			    DIVIDE ( IRSatisfied, IRBlank )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: IR Measures
		lineageTag: f56ee42f-e83b-493f-a0ef-ca4ce4ba07a4

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["PERCENTAGE_FORMATTING"]}

	measure 'Time to Resolve P90 Calendar Hours' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			    CALCULATE (
			        DIVIDE (
			            PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .90 ),
			            60
			        ),
			        KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			            IN {
			                "Health Check",
			                "Not GitHub",
			                "Not Support",
			                "Refer to Sales",
			                "Refer to Finance"
			            } ) ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    ),
			    CALCULATE (
			        DIVIDE (
			            PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .90 ),
			            60
			        ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    )
			)
			
			```
		formatString: #,0.00
		displayFolder: Time Measures
		lineageTag: dc5363b9-060b-4999-a40c-f94e1186ee8e

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Time to Resolve P90 Calendar Days' =
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			    CALCULATE (
			        DIVIDE (
			            DIVIDE (
			                PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .90 ),
			                60
			            ),
			            24
			        ),
			        KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			            IN {
			                "Health Check",
			                "Not GitHub",
			                "Not Support",
			                "Refer to Sales",
			                "Refer to Finance"
			            } ) ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    ),
			    CALCULATE (
			        DIVIDE (
			            DIVIDE (
			                PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .90 ),
			                60
			            ),
			            24
			        ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    )
			)
		formatString: #,0.00
		displayFolder: Time Measures
		lineageTag: 6490baa0-3de6-469b-ac73-b8641b8ce24e

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Time to Resolve P75 Calendar Days' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = [Team],
			    CALCULATE (
			        DIVIDE (
			            DIVIDE (
			                PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .75 ),
			                60
			            ),
			            24
			        ),
			        KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			            IN {
			                "Health Check",
			                "Not GitHub",
			                "Not Support",
			                "Refer to Sales",
			                "Refer to Finance"
			            } ) ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    ),
			    CALCULATE (
			        DIVIDE (
			            DIVIDE (
			                PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .75 ),
			                60
			            ),
			            24
			        ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    )
			)
			
			```
		formatString: #,0.00
		displayFolder: Time Measures
		lineageTag: 07de47b1-5554-4c83-90ef-9844efb14af9

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Time to Resolve P75 Calendar Hours' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			    CALCULATE (
			        DIVIDE (
			            PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .75 ),
			            60
			        ),
			        KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			            IN {
			                "Health Check",
			                "Not GitHub",
			                "Not Support",
			                "Refer to Sales",
			                "Refer to Finance"
			            } ) ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    ),
			    CALCULATE (
			        DIVIDE (
			            PERCENTILE.INC ( FactTicket[Full Resolution Time in Minutes Calendar], .75 ),
			            60
			        ),
			        USERELATIONSHIP ( CalendarDate[Date], FactTicket[Solved Date] )
			    )
			)
			
			```
		formatString: #,0.00
		displayFolder: Time Measures
		lineageTag: 32a11cf3-2c32-49ed-974b-783f63de8498

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Ticket Count' = ```
			
			DISTINCTCOUNT ( FactTicket[ticket_id] )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: d348e16c-85c9-4e67-9483-6196350930ef

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P75 Hours Calendar' = ```
			
			DIVIDE (
			    PERCENTILE.INC (
			        FactTicket[time_to_reply_minutes_calendar_minutes],
			        .75
			    ),
			    60
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: 5251df9f-2422-423d-ac46-8929dc28e390

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P50 Hours Calendar' = ```
			
			DIVIDE (
			    PERCENTILE.INC (
			        FactTicket[time_to_reply_minutes_calendar_minutes],
			        .50
			    ),
			    60
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: a8449190-19e5-4e7e-a9a2-f77fc4926663

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P90 Hours Calendar' = ```
			
			DIVIDE (
			    PERCENTILE.INC (
			        FactTicket[time_to_reply_minutes_calendar_minutes],
			        .90
			    ),
			    60
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: 61c41bb3-ff38-4662-aa0d-0c354a0a2afd

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P75 Minutes Calendar' = ```
			
			PERCENTILE.INC (
			    FactTicket[time_to_reply_minutes_calendar_minutes],
			    .75
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: 0c3baa91-aeb2-4a8a-b220-39ef6e4a7486

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P50 Minutes Calendar' = ```
			
			PERCENTILE.INC (
			    FactTicket[time_to_reply_minutes_calendar_minutes],
			    .50
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: 798fd404-e5d1-4b2f-93c9-3de60b1dc5db

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to IR P90 Minutes Calendar' = ```
			
			PERCENTILE.INC (
			    FactTicket[time_to_reply_minutes_calendar_minutes],
			    .90
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: f1024063-d31c-4153-86db-11b8afa817d3

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by Days to Clear Backlog/Var to required capacity' = ```
			
			IF (
			    OR (
			        SELECTEDVALUE ( DimSHIMeasures[Metric ] ) = "Days to Clear Backlog",
			        SELECTEDVALUE ( DimSHIMeasures[Metric ] ) = "Var to Required Capacity"
			    ),
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 4bdba4f9-dc1e-4254-8a77-3df2e4855608

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Gap %' = ```
			
			IFERROR ( DIVIDE( [Ticket Capacity] - [Ticket Count], [Ticket Capacity]), BLANK () )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Headcount Measures
		lineageTag: e4745bd1-e8d7-4a7a-9263-88f82b832a87

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_USING_THE_IFERROR_FUNCTION","OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Is sliced by Var to required capacity' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] ) = "Var to Required Capacity",
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: b77e306b-01d5-4451-9934-68879881cce3

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalated Count' = ```
			
			CALCULATE ( [Ticket Count], DimTicket[Is Escalated] = TRUE )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 3c7adba6-1b22-49f4-8249-560f51bdf2c0

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	/// Engineering Escalation Rate 
	measure 'Escalation Rate %' = ```
			
			ROUND ( DIVIDE ( [Escalated Count], [Ticket Count] ), 2 )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 2198acfe-d55c-44ac-b805-db4c0d690a20

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["PERCENTAGE_FORMATTING"]}

	measure 'Support ARR Condition' = ```
			
			VAR CHH =
			    SELECTEDVALUE ( PremiumSupportFinancials[ARR] ) - [Support ARR Premium]
			RETURN
			    IF ( CHH > 0, 1, IF ( CHH = 0, 0, -1 ) )
			
			```
		formatString: #,0
		displayFolder: Premium Financials
		lineageTag: ff0c624a-3d89-40ea-882c-db6cf496a350

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support ARR Premium' = ```
			
			VAR index = [Index] - 1
			RETURN
			    CALCULATE (
			        SUM ( PremiumSupportFinancials[ARR] ),
			        FILTER ( ALLSELECTED ( PremiumSupportFinancials ), index = [Index] )
			    )
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: Premium Financials
		lineageTag: e3bab79a-b866-4856-a431-a9ae8617e32a

		changedProperty = IsHidden

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support Gross Condition' = ```
			
			VAR CHH =
			    SELECTEDVALUE ( PremiumSupportFinancials[Gross Margin %] ) - [Support Gross Premium]
			RETURN
			    IF ( CHH > 0, 1, IF ( CHH = 0, 0, -1 ) )
			
			```
		formatString: #,0
		displayFolder: Premium Financials
		lineageTag: 4fe9e4b8-fcd7-456d-b93d-6bda28932d6a

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support Gross Premium' = ```
			
			VAR index = [Index] - 1
			RETURN
			    CALCULATE (
			        MIN ( PremiumSupportFinancials[Gross Margin %] ),
			        FILTER ( ALLSELECTED ( PremiumSupportFinancials ), index = [Index] )
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Premium Financials
		lineageTag: dbbec727-03be-440c-bb96-d9c473e2db70

		changedProperty = IsHidden

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Escalations Issue Count' = ```
			
			COUNT ( BridgeEscalationsIssue[issue_id] )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 62bb5c71-f620-4f56-ae01-aae04c9bfd7e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by Escalation Metrics' = ```
			
			IF ( SELECTEDVALUE ( DimSHIMeasures[Metric ] ) = "Escalation Rate %", 1, 2 )
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: db0c52ae-e22b-4df8-bd6b-43dd11aa81f6

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Current Open Tickets' = ```
			
			CALCULATE ( COUNT ( FactTicket[ticket_id] ), Dimticket[Status] = "Open" )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 4e4fdec3-356d-4fb5-a76e-7f5787e468c7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Current New Tickets' = ```
			
			CALCULATE ( COUNT ( FactTicket[ticket_id] ), Dimticket[Status] = "New" )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: ec493be4-0114-48e0-9eb8-b2a1e08b9343

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Current Hold Tickets' = ```
			
			CALCULATE ( COUNT ( FactTicket[ticket_id] ), Dimticket[Status] = "Hold" )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 01575b87-9d5c-4c81-a10d-a3d3d3db024e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Current Pending Tickets' = ```
			
			CALCULATE ( COUNT ( FactTicket[ticket_id] ), Dimticket[Status] = "Pending" )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 32e49b3a-4e07-4ee4-a793-737b0ce896fb

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	/// The number of tickets with status new and open where the priority is urgent and high
	measure 'Current Critical Backlog' = ```
			
			CALCULATE (
			    COUNT ( FactTicket[ticket_id] ),
			    OR ( Dimticket[Status] = "Open", Dimticket[Status] = "New" ),
			    OR (
			        DimTicket[Current Priority] = "urgent",
			        DimTicket[Current Priority] = "high"
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 65a49d4b-1561-44ca-a974-3f6a4671d847

	measure 'Deflection Category Count' = ```
			
			
			VAR count_categ =
			
			    CALCULATE (
			
			        COUNT ( DimTicket[Deflection Category Name] ),
			
			        FILTER (
			
			            DimTicket,
			
			            NOT ISBLANK ( DimTicket[Deflection Category Name] )
			&& DimTicket[Deflection Category Name] <> ""
			
			        )
			
			    )
			
			RETURN
			
			    IF ( ISBLANK ( count_categ ), 0, count_categ )
			
			 
			```
		formatString: #,0
		displayFolder: Deflection Category
		lineageTag: 181f7dc0-935b-43f3-b9cb-4177abd1dbd7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Deflection Reference Count' =
			
			CALCULATE (
			    COUNT ( DimTicket[Deflection Category Reference] ),
			    FILTER (
			        DimTicket,
			        DimTicket[Deflection Category Reference] <> ""
			            && NOT ISBLANK ( DimTicket[Deflection Category Reference] )
			    )
			)
		formatString: #,0
		displayFolder: Deflection Category
		lineageTag: 67038d64-1be2-4bbc-a436-6163b3181281

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Deflection Category %' = ```
			
			VAR per_categ =
			    DIVIDE ( [Deflection Category Count], [Total Active Tickets] )
			RETURN
			    IF ( ISBLANK ( per_categ ), 0, per_categ )
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Deflection Category
		lineageTag: 9a086bb9-53f5-4126-a982-43bcac79baef

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Deflection Reference %' = ```
			
			DIVIDE ( [Deflection Reference Count], [Total Active Tickets] )
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Deflection Category
		lineageTag: c4a9e01e-4e7b-4297-9c6b-cdcd13899f1f

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Deflection Category (last week)' = ```
			
			VAR max_date =
			    MAX ( FactTicket[Created Date] )
			VAR week_start_date =
			    CALCULATE (
			        DISTINCT ( CalendarDate[Week Starting Date] ),
			        CalendarDate[Date] = max_date
			    )
			VAR week_end_date =
			    CALCULATE (
			        DISTINCT ( CalendarDate[Week Ending Date] ),
			        CalendarDate[Date] = max_date
			    )
			RETURN
			    CALCULATE (
			        [Deflection Category Count],
			        DATESBETWEEN ( CalendarDate[Date], week_start_date - 7, week_end_date - 7 )
			    )
			
			```
		formatString: #,0
		displayFolder: Deflection Category
		lineageTag: ab657e71-63f6-43e8-a897-0b81f1202cc1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Deflection Category (1 week before)' = ```
			
			VAR max_date =
			    MAX ( FactTicket[Created Date] )
			VAR week_start_date =
			    CALCULATE (
			        DISTINCT ( CalendarDate[Week Starting Date] ),
			        CalendarDate[Date] = max_date
			    )
			VAR week_end_date =
			    CALCULATE (
			        DISTINCT ( CalendarDate[Week Ending Date] ),
			        CalendarDate[Date] = max_date
			    )
			RETURN
			    CALCULATE (
			        [Deflection Category Count],
			        DATESBETWEEN ( CalendarDate[Date], week_start_date - 14, week_end_date - 14 )
			    )
			
			```
		formatString: #,0
		displayFolder: Deflection Category
		lineageTag: e2280538-a863-461a-9cd1-06db3a2a1df5

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Deflection Reference Link' = ```
			
			VAR temp =
			    MAX ( DimTicket[Deflection Category Reference] )
			VAR temp1 = FIND ( "https://", temp, 1, BLANK() )
			RETURN
			    IF (
			        CONTAINSSTRING ( temp, "https://" ),
			        MID (
			            temp,
			            temp1,
			            IFERROR ( FIND ( " ", temp, temp1 ), LEN ( temp ) + 1 )
			                - temp1
			        ),
			        BLANK ()
			    )
			
			```
		displayFolder: Deflection Category
		lineageTag: c7a39182-a202-4055-b7c7-789b7ba593a2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_USING_THE_IFERROR_FUNCTION","OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'Range 1' = ```
			
			0.25
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deflection Category
		lineageTag: aada1793-0b92-4c70-adf1-e3e7c2fcba48

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Range 2' = ```
			
			0.29
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deflection Category
		lineageTag: 33cb01eb-89d1-44cb-ad10-f10d65f0af95

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Range 3' = ```
			
			.4
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deflection Category
		lineageTag: bd640907-5481-468e-a3be-ca2497540ef5

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	/// Used to Ticket for CRE monthly reporting
	measure 'Ticket Count CRE' =
			
			CALCULATE (
			    COUNT ( FactTicket[ticket_id] ),
			   CROSSFILTER(DimEntitySalesforceAccount[Salesforce Account ID],FactCRECustomerMonthlySummary[salesforce_account_id],Both
			)
			)
		formatString: #,0
		displayFolder: CRE Reporting Measures
		lineageTag: 0bb42748-139a-46d8-94b1-daab4c8a8f77

	measure 'Deflection Category Reference %' = ```
			
			VAR per_categ = [Deflection Reference %]
			RETURN
			    IF ( ISBLANK ( per_categ ), 0, per_categ )
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Deflection Category
		lineageTag: f2b28f50-9b24-471c-b3e0-69a999b96e6d

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Count Customer Sentiment' = ```
			
			COUNT ( FactCRECustomerMonthlySummary[Customer Sentiment] )
			
			```
		formatString: #,0
		displayFolder: CRE Reporting Measures
		lineageTag: f1391ce9-9f8d-4f3b-861a-1e025cc5a5ce

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Account at Risk Count' = ```
			
			COUNT ( DimCRECustomerMonthlySummary[Is the Account in Risk] )
			
			```
		formatString: #,0
		displayFolder: CRE Reporting Measures
		lineageTag: d5671bc1-892c-44e9-bd9b-6b0d4f6c7240

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CRE Sentiment Blank' = ```
			
			COUNTBLANK ( FactCRECustomerMonthlySummary[Customer Sentiment] )
			
			```
		formatString: #,0
		displayFolder: CRE Reporting Measures
		lineageTag: 49396929-ea5d-447c-9d09-ef8cb3da1dfd

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CRE Summary Date Blank' = ```
			
			COUNTBLANK ( FactCRECustomerMonthlySummary[CRE Summary Date] )
			
			```
		formatString: #,0
		displayFolder: CRE Reporting Measures
		lineageTag: 2b6c4a58-6809-4fd2-8137-7e5f1341c8a1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Consumption Products' = ```
			
			CONCATENATEX (
			    VALUES ( DimConsumptionInvoices[Product Name] ),
			    DimConsumptionInvoices[Product Name],
			    ", "
			)
			
			```
		displayFolder: Products
		lineageTag: 7e677c7a-7899-4fa2-b111-1381f4c4e2af

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'License Products' = ```
			
			CONCATENATEX (
			    VALUES ( FactProductArr[Product Name] ),
			    FactProductArr[Product Name],
			    ", "
			)
			
			```
		displayFolder: Products
		lineageTag: 6d6ffd95-6cd9-4ffe-8d81-981c27eca43c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	/// This measure is to Calculate Assigned Ticket Average  for the Excluding the filter of manager and assignee on the SE Comparison Report
	measure 'Assigned Ticket Average' = ```
			
			DIVIDE (
			    CALCULATE (
			        [Ticket Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: c5f38dcc-7271-4560-a039-52cf51310f5e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support CSAT Average' = ```
			
			IF (
			    ISBLANK ( [Support CSAT] ),
			    BLANK (),
			    CALCULATE (
			       [Support CSAT],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    )
			)
			
			```
		formatString: #,0.00
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 2aebad40-fd7a-4d87-8c9b-f5367e0a29e1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Is sliced by metric IC, Manager test' = ```
			
			IF (
			    OR (
			        ISFILTERED ( DimAssignee[Assignee Name] ),
			        ISFILTERED ( DimManager[Manager Name] )
			    ),
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 4906b7ae-c4b1-42b5-aad1-03662c40f2ab

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by metric Squad' = ```
			
			IF ( ISFILTERED ( DimSquad[Squad] ), 1, 2 )
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 8f09670b-6f7c-4d03-b3a2-411213512cd8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Solved Ticket Average' = ```
			
			DIVIDE (
			    CALCULATE (
			        [Solved Ticket Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 452cd78a-2fe2-4bf4-ac41-be34cd54a0d1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	/// This measure is to Calculate Average IR Met for the Excluding the filter of manager and assignee on the SE Comparison Report
	measure '% IR Met High Average' = ```
			
			IF (
			    ISBLANK ( [% IR Met High] ),
			    BLANK (),
			    CALCULATE (
			        [% IR Met High],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    )
			)
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: a6458c40-9912-40ad-bf72-4be21ea2b2ff

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Complexity Level Avg' =
			
			CALCULATE (
			    AVERAGE ( DimTicket[Complexity Level  Number] )
			    , FILTER (
			        DimTicket,
			        NOT(ISBLANK(DimTicket[Complexity Level])) &&
			        DimTicket[Complexity Level] <> "(Blank)"
			    ),
			    ALL ( DimAssignee[Assignee Name] ),
			    ALL ( DimManager[Manager Name] )
			)
		formatString: #,0.00
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 1bb9abf3-fecd-4ec6-89ae-a2bfc01b456f

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'Complexity Level Avg Selected' =
			CALCULATE(AVERAGE ( DimTicket[Complexity Level  Number] ), NOT(ISBLANK(DimTicket[Complexity Level])
			))
		formatString: #,0.00
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: d80f222c-4215-4206-b9e7-3ab147494452

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Ticket Count Provided Initial Response Average' = ```
			
			DIVIDE (
			    CALCULATE (
			        [Ticket Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] ),
			        DimTicket[Is  Initial Response Eligible] = TRUE,
			        USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			    ),
			    CALCULATE (
			        [Total Assignees],
			        USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: ab9ac0ab-53b0-443b-87bf-d564cdc4227f

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Ticket Count Provided Initial Response Selected' = ```
			
			CALCULATE (
			    [Ticket Count],
			    DimTicket[Is  Initial Response Eligible] = TRUE,
			    USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 8abce089-02e6-46e1-af33-bdb423d1e105

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support ARR' = ```
			
			VAR result =
			    SUM ( DimSupportPlanDetails[Support ARR] )
			RETURN
			    IF ( ISBLANK ( result ), 0, result )
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: DimSupportPlanDetails
		lineageTag: 40a815b6-5507-4fe4-a130-fd8e3066cc32

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Github Support ARR Embedded in Unified' = ```
			
			VAR result =
			    SUM ( DimSupportPlanDetails[github_support_arr_embedded_in_unified] )
			RETURN
			    IF ( ISBLANK ( result ), 0, result )
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: DimSupportPlanDetails
		lineageTag: 47f945ad-d94e-49b4-b41c-2c64a8a92360

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Proxy for Total Support ARR GH plus MSFT' = ```
			
			VAR result =
			    CALCULATE (
			        SUM ( DimSupportPlanDetails[Proxy for Total Support ARR GH plus MSFT] ),
			        USERELATIONSHIP ( DimEntitySalesforceAccount[Salesforce Account ID], DimSupportPlanDetails[entity_id] )
			    )
			RETURN
			    IF ( ISBLANK ( result ), 0, result )
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: DimSupportPlanDetails
		lineageTag: 190714d6-0182-4f2e-b8d2-59b0d722fe52

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Current Quarter ARR' = ```
			
			VAR result =
			    DIVIDE ( [Proxy for Total Support ARR GH plus MSFT], 4 )
			RETURN
			    IF ( ISBLANK ( result ), 0, result )
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: DimSupportPlanDetails
		lineageTag: be526fb4-a640-428e-8e18-7e258ce06f43

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Potential cost(20% Q-ARR)' = ```
			
			[Current Quarter ARR] * 0.2
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: DimSupportPlanDetails
		lineageTag: 3833efd2-0431-4788-a72f-a24657ff69d0

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Report Link SA' = ```
			
			CONCATENATE (
			    CALCULATE (
			        MAX ( EnvironmentConfig[URL] ),
			        EnvironmentConfig[URL Name] = "Report Link SA"
			    ),
			    "?filter=DimSalesforceAccount/Salesforce_x0020_Account_x0020_ID eq '"
			        & MAX ( DimSupportPlanDetails[entity_id] ) & "'"
			)
			
			```
		displayFolder: DimSupportPlanDetails
		lineageTag: 9073c670-a62a-4484-bd39-923e8f1aa11d
		dataCategory: WebUrl

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure '% IR Met High 1' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard",
			    VAR IRSatisfied =
			        CALCULATE (
			            [Ticket Count],
			            KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			            KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    VAR IRBlank =
			        CALCULATE (
			            [Ticket Count],
			            NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			            KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    RETURN
			        1,
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        RETURN
			            2,
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count],
			                DimTicket[Is Initial Response Met] = TRUE,
			                DimTicket[First Priority] = "high",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [Ticket Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                DimTicket[First Priority] = "high",
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        RETURN
			            3
			    )
			)
			
			```
		formatString: #,0
		displayFolder: IR Measures
		lineageTag: b2c041cb-82d2-4529-9fbc-efa592896c55

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IR Met % High Comparison' = ```
			
			CALCULATE (
			    [% IR Met High],
			    ALL ( DimAssignee[Assignee Name] ),
			    ALL ( DimManager[Manager Name] )
			)
			
			```
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 8f1c0a90-b62f-4154-a030-cc70219f0ddf

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Is sliced by metric Cost Center IC' = ```
			
			IF ( ISFILTERED ( DimAssignee[Cost Center] ), 1, 2 )
			
			```
		formatString: #,0
		displayFolder: Management Metrics
		lineageTag: 69181c74-3fcb-4bf9-80d3-aa712749a46c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by Team' = ```
			
			IF (
			    ISFILTERED ( DimTeam[Team] )
			        && NOT ( DISTINCTCOUNT ( DimTeam[Team] ) = 6 ),
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 3e184529-c289-412a-86aa-c5019de83645

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Backlog All Status' = ```
			
			CALCULATE (
			    [Total Backlog All Status],
			    ALL ( DailySupportTicketsBacklogCount[Backlog Status] )
			)
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 6c43e2ab-b6c0-4926-b4f2-7681e31c6388

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Backlog Last Day Month All Status' = ```
			
			CALCULATE ( [Total Backlog All Status], ENDOFMONTH ( CalendarDate[Date] ) )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: dc053489-0266-4999-a402-fb8447951559

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Total Backlog All Status' = ```
			
			SUM ( DailySupportTicketsBacklogCount[Open Tickets] )
			
			```
		formatString: #,0
		displayFolder: Backlog Metrics
		lineageTag: 0754eae6-9cbc-4e56-8b9b-ed79ec774ac7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_DUPLICATE_MEASURES","OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by CSAT, IR, P75' = ```
			
			SWITCH (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] ),
			    "IR Met %", 1,
			    "IR Met % Urgent", 1,
			    "IR Met % High", 1,
			    "Time to Resolve P75", 1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Intermediate Measures
		lineageTag: 8eb9bfe2-eb62-411f-8761-c73752d8653a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure '# of Summaries Submitted' = ```
			
			COUNT ( FactCRECustomerMonthlySummary[CRE Summary Date] )
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 65d98e9f-bd74-4129-8320-a22b01687547

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure '# of Summaries Submitted All CRE' = ```
			
			DIVIDE (
			    CALCULATE (
			        [# of Summaries Submitted],
			        ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			    ),
			    [Total CRE Assigned]
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 2f6b3305-21d6-4b44-b4ce-202fd0e062ee

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average # of PR in Premium Support' = ```
			
			CALCULATE (
			    COUNT ( DimICPR[PR ID] ),
			    DimICPR[PR Repository Name] = "github/premium-support"
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 646ab073-6530-49cf-ba30-693e828e40a1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Customer Sentiment All CRE' = ```
			
			CALCULATE (
			    [Average Customer Sentiment],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: ad0cb995-2902-428f-9748-d3194083da86

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average All Customers CSAT for Premium Plus CRE' = ```
			
			CALCULATE (
			    [Average CSAT for Premium Plus CRE],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: befde309-2d97-4034-a186-dc6cff340165

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average CSAT for Premium Plus CRE' = ```
			
			    CALCULATE ( [Support CSAT], KEEPFILTERS ( DimTeam[Team] = "Premium Plus" ) )
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: bc24475d-d25e-4481-abf6-ea259b580f21

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Customer Sentiment' = ```
			
			AVERAGE ( FactCRECustomerMonthlySummary[Customer Sentiment Number] )
			
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: 80d03010-46a0-4717-8440-8d897783a667

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average IR Met % High All CRE' = ```
			
			CALCULATE (
			    [% IR Met High],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: CRE Comparison Metrics
		lineageTag: f39ca418-ec75-4bf5-b53f-7299c3c1a2ce

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Average Customer Complexity All CRE' = ```
			
			CALCULATE (
			    [Average Customer Complexity],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: 39ada384-991d-49bf-ba96-6c54a8787253

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Total CRE Assigned' = ```
			
			CALCULATE (
			    DISTINCTCOUNTNOBLANK ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] ),
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 7fd0ea42-63f0-4c5f-a698-60abb40cb7a0

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IR Met % Surveys' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard",
			    VAR IRSatisfied =
			        CALCULATE (
			            [CSAT Survey Responses Count],
			            KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    VAR IRBlank =
			        CALCULATE (
			            [CSAT Survey Responses Count],
			            NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			        )
			    RETURN
			        DIVIDE ( IRSatisfied, IRBlank ),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			        VAR IRSatisfied =
			            CALCULATE (
			                [CSAT Survey Responses Count],
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [CSAT Survey Responses Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE )
			            )
			        RETURN
			            DIVIDE ( IRSatisfied, IRBlank ),
			        VAR IRSatisfied =
			            CALCULATE (
			                [CSAT Survey Responses Count],
			                DimTicket[Is Initial Response Met] = TRUE,
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        VAR IRBlank =
			            CALCULATE (
			                [CSAT Survey Responses Count],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                DimTicket[Is  Initial Response Eligible] = TRUE
			            )
			        RETURN
			            DIVIDE ( IRSatisfied, IRBlank )
			    )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: IR Measures
		lineageTag: 207fd68a-408d-404a-bc84-12d6bbd87659

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Average Customer Complexity' = ```
			
			AVERAGEX (
			    FactCRECustomerMonthlySummary,
			    VAR effortText = FactCRECustomerMonthlySummary[Overall Level of Effort]
			    RETURN
			        IF (
			            ISBLANK(effortText) || effortText = "",
			            BLANK(),
			            VALUE(LEFT(effortText, 1))
			        )
			)
			// Average Customer Complexity = 
			// AVERAGEX (
			//     FactCRECustomerMonthlySummary,
			//     LEFT ( FactCRECustomerMonthlySummary[Overall Level of Effort] ) + 0
			// )
			```
		formatString: #,0.00
		displayFolder: CRE Comparison Metrics
		lineageTag: a47b0b7e-f7a0-45ed-a98d-becacd100f7c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Total Technical Advisory Hours Used' = ```
			
			SUM ( FactCRECustomerMonthlySummary[Total Technical Advisory Hours Used] )
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 63d08df3-9594-46ae-9e17-e67f7970fd36

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Total Technical Advisory Hours All CRE' = ```
			
			DIVIDE (
			    CALCULATE (
			        [Average Total Technical Advisory Hours Used],
			        ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			    ),
			    [Total CRE Assigned]
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 69b764b9-c952-437a-8694-bd0163b1e4ff

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Health Checks Delivered' = ```
			
			CALCULATE (
			    COUNT ( DimTicket[Ticket ID] ),
			    DimTicket[Is Health Check] = TRUE ()
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 82052a3f-dfd6-4bc6-80d5-11066b309842

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Month Rolling AVG' = ```
			
			VAR __Calc =
			    IF (
			        ISFILTERED ( 'CalendarDate'[Fiscal Year] ),
			        ERROR ( "Time intelligence quick measures can only be grouped or filtered by the Power BI-provided date hierarchy or primary date column." ),
			        VAR __LAST_DATE =
			            LASTDATE ( CalendarDate[Date] )
			        RETURN
			            AVERAGEX (
			                DATESBETWEEN (
			                    CalendarDate[Date],
			                    DATEADD ( __LAST_DATE, -2, MONTH ),
			                    __LAST_DATE
			                ),
			                CALCULATE ( [Ticket Count] )
			            )
			    )
			RETURN
			    IF ( MAX ( CalendarDate[Date] ) > TODAY (), BLANK (), __Calc )
			
			```
		formatString: #,0
		displayFolder: Average Measures
		lineageTag: a8fbe04e-eace-49a3-a274-945cc1427ca5

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Health Checks Delivered All CRE' = ```
			
			CALCULATE (
			    [Health Checks Delivered],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 9381eb8d-81df-47e2-a317-02d08c47b75b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average # of PR in Premium Support All CRE' = ```
			
			CALCULATE (
			    [Average # of PR in Premium Support],
			    ALL ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] )
			)
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 0232515f-c783-4281-82d8-ed13a04fc213

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by CRE' = ```
			
			IF ( ISFILTERED ( DimCRECustomerMonthlySummary[CRE Assigned 1 Name] ), 1, 2 )
			
			```
		formatString: #,0
		displayFolder: CRE Comparison Metrics
		lineageTag: 4fbc4aba-5f4d-4ff0-87f6-a62f32370201

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'CSAT (Overall)' = ```
			
			CALCULATE ( [Support CSAT], ALL ( 'DimTeam'[Team] ) )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: 51d37f94-21f1-4d2e-977b-1de72c0419d2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Premium Standard CSAT' = ```
			
			CALCULATE ( [Support CSAT], DimTeam[Team] = "Premium Standard" )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: df85b214-b560-41eb-a819-e20a557e0873

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Premium Plus CSAT' = ```
			
			CALCULATE ( [Support CSAT], DimTeam[Team] = "Premium Plus" )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: 356fb074-f4e9-4c1b-8b99-15233cdfeb11

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Technical CSAT' = ```
			
			CALCULATE ( [Support CSAT], DimTeam[Team] = "Technical" )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: 446efbcc-392d-49a7-b665-1f4f6b293d8b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Enterprise CSAT' = ```
			
			CALCULATE ( [Support CSAT], DimTeam[Team] = "Enterprise" )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: f59d7883-2763-4bf5-afd4-7a5f97c89293

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Security & Revenue Support CSAT' = ```
			
			CALCULATE ( [Support CSAT], DimTeam[Team] = "Security & Revenue Support" )
			
			```
		formatString: #,0.00
		displayFolder: CSAT Measures
		lineageTag: da6a25ec-78ab-4360-b873-255a6dc58ae6

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Total Assignees' = ```
			
			CALCULATE (
			    DISTINCTCOUNT ( DimAssignee[Assignee Name] ),
			    ALL ( DimAssignee[Assignee Name] ),
			    ALL ( DimManager[Manager Name] )
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 7178fd37-504d-47ae-a37b-b595fbb02782

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Comment Count (RLS)' = CALCULATE([Comment Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: be149c70-8deb-4695-b607-4e36a559d86b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support CSAT (RLS)' = CALCULATE([Support CSAT], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 6c5f9065-4029-454a-ba1c-1756062232d4

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'IC CSAT (RLS)' = CALCULATE([IC CSAT], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 4a9d5bb4-78b6-42ad-be9a-9dd60097af17

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Median Reply Time in Hours Calendar (RLS)' = CALCULATE([Median Reply Time in Hours Calendar], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: b36463b5-7100-4fe7-8a6c-0fab7e36a0f2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Median Full Resolution Time in Days Calendar (RLS)' = CALCULATE([Median Full Resolution Time in Days Calendar], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: a0b91814-70b7-4343-9448-9ed24eb06d02

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Ticket Comment 30 Day Rolling Average (RLS)' = ```
			
			IF (
			    ISFILTERED ( CalendarDate[Date] ),
			    VAR __LAST_DATE =
			        LASTDATE ( CalendarDate[Date] )
			    RETURN
			        AVERAGEX (
			            DATESBETWEEN (
			                CalendarDate[Date],
			                DATEADD ( __LAST_DATE, -30, DAY ),
			                DATEADD ( __LAST_DATE, 30, DAY )
			            ),
			            CALCULATE ( [Comment Count (RLS)] )
			        )
			)
			
			```
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 08d1bf45-612e-43d3-b5d8-7a82aa764d59

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Support CSAT 30 Day Moving Average (RLS)' = ```
			
			VAR __Calc =
			    IF (
			        ISFILTERED ( CalendarDate[Fiscal Year] ),
			        ERROR ( "Time intelligence quick measures can only be grouped or filtered by the Power BI-provided date hierarchy or primary date column." ),
			        VAR __LAST_DATE =
			            LASTDATE ( CalendarDate[Date] )
			        RETURN
			            AVERAGEX (
			                DATESBETWEEN (
			                    CalendarDate[Date],
			                    DATEADD ( __LAST_DATE, -29, DAY ),
			                    __LAST_DATE
			                ),
			                CALCULATE ( [Support CSAT (RLS)] )
			            )
			    )
			RETURN
			    IF ( MAX ( CalendarDate[Date] ) > TODAY (), BLANK (), __Calc )
			
			```
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 6433f377-5ee9-49f7-b489-356d5b754ab7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Ticket Count (RLS)' = ```
			CALCULATE([Ticket Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
			
			
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: b587a4f8-9e29-4709-808a-267242b793b7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Updated Ticket Count (RLS)' = CALCULATE([Updated Ticket Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 8f41ea76-5d66-4127-9b8f-7e628e3243f1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Created Ticket Count (RLS)' = CALCULATE([Created Ticket Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: e7b36294-62f0-4ab5-bb52-277db3449b49

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Solved Ticket Count (RLS)' = CALCULATE([Solved Ticket Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: f733ce99-133b-4fe1-bee2-2ed2be1800fb

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Median Reply Time in Minutes Calendar (RLS)' = CALCULATE([Median Reply Time in Minutes Calendar], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: e6cd491f-7819-45e8-a6bc-aee55994d5a4

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure '% IR Met (RLS)' = ```
			
			IF (
			    SELECTEDVALUE ( DimTeam[Team] ) = "Premium Standard",
			    VAR IRSatisfied =
			      CALCULATE (
			            [Ticket Count (RLS)],
			            KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			             USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			        )
			    VAR IRBlank =
			        CALCULATE (
			           [Ticket Count (RLS)],
			            NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			             USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			        )
			    RETURN
			        ROUND(DIVIDE ( IRSatisfied,  IRBlank ),2),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Premium Plus",
			        VAR IRSatisfied =
			          CALCULATE (
			                [Ticket Count (RLS)],
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        VAR IRBlank =
			           CALCULATE (
			               [Ticket Count (RLS)],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        RETURN
			            ROUND(DIVIDE ( IRSatisfied, IRBlank ),2),
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] ) = "Enterprise",
			        VAR IRSatisfied =
			          CALCULATE (
			                [Ticket Count (RLS)],
			                KEEPFILTERS ( NOT ( DimTicketTag[Tag Name]
			            IN {
			                "closed_by_merge"
			            } ) ),
			                KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        VAR IRBlank =
			           CALCULATE (
			                [Ticket Count (RLS)],
			                KEEPFILTERS ( NOT ( DimTicketTag[Tag Name]
			            IN {
			                "closed_by_merge"
			            } ) ),
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        RETURN
			            ROUND(DIVIDE ( IRSatisfied, IRBlank ),2),
			        VAR IRSatisfied =
			            CALCULATE (
			                [Ticket Count (RLS)],
			                DimTicket[Is Initial Response Met] = TRUE,
			                DimTicket[Is  Initial Response Eligible] = TRUE,
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        VAR IRBlank =
			       CALCULATE (
			                [Ticket Count (RLS)],
			                NOT ( ISBLANK ( DimTicket[Is Initial Response Met] ) ),
			                DimTicket[Is  Initial Response Eligible] = TRUE,
			                 USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        RETURN
			        ROUND( DIVIDE ( IRSatisfied, IRBlank ),2)
			    )
			)
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: RLS Measures Testing
		lineageTag: 65f92f33-70a7-4d77-ae41-3f65cf112fd8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Reopens Count (RLS)' = CALCULATE(COUNT(DimTicket[Reopens Count]), TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0c97b60e-2cf8-4f9c-a489-0478ae4d0dcb

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Time to Resolve P75 Calendar Days (RLS)' = CALCULATE([Time to Resolve P75 Calendar Days], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: b09a0ee5-9bf0-44ae-b3f2-5bd79b722f2a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'GitHub Issues Count (RLS)' = CALCULATE([Github Issues Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0d887cbd-78ce-40d1-a67f-a513f47e2509

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'PR Count (RLS)' = CALCULATE([PR Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0c6af2ff-24ec-4480-a0b5-40e166ee25be

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure TestingUserName = USERNAME()
		displayFolder: RLS Measures Testing
		lineageTag: f351297d-f2b5-4e3f-9f2f-a5df77427dff

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'Average Full Resolution Time in Days Calendar (RLS)' = CALCULATE([Average Full Resolution Time in Days Calendar], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 17a3b90c-5e64-4697-ba25-1543029532df

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Assigned Ticket Average (RLS)' = CALCULATE([Assigned Ticket Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0b897823-741b-4128-a5fb-4aa37a346c55

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Reopens Sum (RLS)' = CALCULATE([Reopens Sum], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 916f9117-9855-408d-b71c-c596a8e8a391

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Reopens Average (RLS)' = CALCULATE([Reopens Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 41e34111-4e6f-4688-9f28-5106e7d783c2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Average Ticket Solved (RLS)' = CALCULATE([Average Ticket Solved], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: c4ba8a4e-f6bd-4cad-bb95-656a6893f358

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Complexity Level Avg Selected (RLS)' = CALCULATE([Complexity Level Avg Selected], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: a39d8a1c-f95f-4336-ad52-5608fee68d84

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Complexity Level Avg (RLS)' = CALCULATE([Complexity Level Avg], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: af92c592-3b1b-49e6-9dd9-70207a4b67cb

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure '% IR Met High (RLS)' = CALCULATE([% IR Met High], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0%;-#,0%;#,0%
		displayFolder: RLS Measures Testing
		lineageTag: d72a4b80-815a-4759-a108-59c5ade76937

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% IR Met High Average (RLS)' = CALCULATE([% IR Met High Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: RLS Measures Testing
		lineageTag: c185871d-b38d-4808-92f8-b167af2b3357

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Support CSAT Average (RLS)' = CALCULATE([Support CSAT Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 19f096a3-b98c-4696-97ad-30b7c107aee1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Ticket Count Provided Initial Response Selected (RLS)' = CALCULATE([Ticket Count Provided Initial Response Selected], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 3c719b93-b462-42d8-bbad-97d5606b04db

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Ticket Count Provided Initial Response Average (RLS)' = CALCULATE([Ticket Count Provided Initial Response Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 64a203ed-be48-473a-970e-20200f6eee36

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average CSAT for Premium Plus CRE (RLS)' = CALCULATE([Average CSAT for Premium Plus CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: dea9b66d-c28a-444d-b45e-02ebe29152fa

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average All Customers CSAT for Premium Plus CRE (RLS)' = CALCULATE([Average All Customers CSAT for Premium Plus CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: f269bd97-eb57-4579-a8c5-9d43e7a2d151

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Ticket Count ER' =
			
			CALCULATE(
			    DISTINCTCOUNT ( FactTicket[ticket_id]), BridgeEscalationsIssue[Same month Escalation]=1
			
			 )
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 50977463-b680-4b79-8be8-c610a315a59b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalated Count same month' =
			
			CALCULATE ( COUNT(BridgeEscalationsIssue[ticket_id]),BridgeEscalationsIssue[Same month Escalation]=1
			)
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: e0363d0c-c2ee-443e-9d7c-c94f547b11ab

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalation Rate % Before month' =
			
			ROUND(DIVIDE ( [Escalated Count before month], [Ticket Count]),2)
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: c6454606-7bac-4a44-800a-cb43e1ef8da9

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Escalated Count before month' =
			
			CALCULATE ( COUNT(BridgeEscalationsIssue[ticket_id]),BridgeEscalationsIssue[Same month Escalation]=2
			)
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: e27f48a7-29a5-443c-ba6d-0356c5522c79

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalation Rate %  same month' =
			
			ROUND(DIVIDE ( [Escalated Count same month], [Ticket Count]),2)
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 3626a108-a81c-4b90-ba04-e7b39cf6ad58

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Escalated Count after month' =
			
			CALCULATE ( COUNT(BridgeEscalationsIssue[ticket_id]),BridgeEscalationsIssue[Same month Escalation]=0
			)
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 0e452461-7702-4124-ab0b-81adc9184d38

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalation Rate % After month' =
			
			ROUND(DIVIDE ( [Escalated Count after month], [Ticket Count]),2)
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 20c5a30d-1db5-47ed-8945-b8c25c61b4b6

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Escalated count new' = ```
			
			CALCULATE (
			    COUNT ( BridgeEscalationsIssue[ticket_id] ),
			    BridgeEscalationsIssue[Escalation Mapping] == "same month",
			    USERELATIONSHIP ( CalendarDate[Date], BridgeEscalationsIssue[escalation_month] )
			)
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: a7ab1c1b-66b0-4c59-bb55-5600d1eac8a2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalation Rate % new' = ```
			
			ROUND ( DIVIDE ( [Escalated count new], [Ticket Count] ), 2 )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 5b921e30-72dd-4c77-89ae-437e2da22328

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Price Per Seat' =
			
			DIVIDE(
			SUM(FactFCPMonthlyProductMetrics[Support ARR]),
			SUM(FactFCPMonthlyProductMetrics[License Seats])
			)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 085c8fec-1152-461e-b1e6-9f77118844c1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Days Until End of Month' = INT(EOMONTH(TODAY(), 0) - TODAY())
		formatString: #,0
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 3c4cdab5-6bbf-4c0b-8308-2b4a89e61924

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Days From First of Month' = DATEDIFF(DATE(YEAR(today()), month(today()), 1), TODAY(),DAY) +1
		formatString: #,0
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: ad0b9916-1e22-481f-814b-e8725368a05c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Estimated EOM tickets' = [Ticket Count] + DIVIDE([Ticket Count], [Days From First of Month] ) * [Days Until End of Month]
		formatString: #,0
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 1927dd2e-72c4-4f70-8d6f-a95581f9814b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure IPX = DIVIDE([Ticket Count], [Seats / 1000])
		formatString: #,0.00
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 6b15b48a-23d2-4102-8f89-c72015e94545

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","USE_THE_DIVIDE_FUNCTION_FOR_DIVISION"]}

	measure 'Forecasting Goal' = 5/100
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 2575dcc2-b4ae-4d8f-9a4c-f738c72b5880

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Average Public Replies Hubbers' = ```
			
			
			VAR Numerator = CALCULATE( 
			    COUNT(DimTicketComment[Comment ID]), 
			    DimTicketComment[Is Public Comment] = True, 
			    DimTicketComment[Author Role] IN {"agent","admin"}
			)
			VAR Denominator = COUNT(DimTicket[Ticket ID])
			RETURN
			IF(Denominator <> 0, Numerator / Denominator, BLANK())
			
			```
		formatString: #,0.0
		displayFolder: Forecasting Team Dashboard Measures
		lineageTag: 23c8b453-f3b6-48ba-a685-b4cc47daf02a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average of Previous 4 months Ticket Count' = ```
			
			VAR a =
			    IF ( ISBLANK ( [Fourth Last Closed Month Ticket Count] ), 0, 1 )
			VAR b =
			    IF ( ISBLANK ( [Fifth Last Closed Month Ticket Count] ), 0, 1 )
			VAR c =
			    IF ( ISBLANK ( [Third Last Closed Month Ticket Count] ), 0, 1 )
			VAR d =
			    IF ( ISBLANK ( [Second Last Closed Month Ticket Count] ), 0, 1 )
			VAR PrevMonth =
			    CALCULATETABLE (
			        DATESBETWEEN (
			            CalendarDate[Date],
			            EOMONTH ( TODAY (), -6 ) + 1,
			            EOMONTH ( TODAY (), -2 )
			        )
			    )
			VAR FinalCalc =
			    DIVIDE (
			        CALCULATE ( COUNT ( DimTicket[Ticket ID] ), PrevMonth ),
			        a + b + c + d
			    )
			RETURN
			    FinalCalc
			
			```
		formatString: #,0.00
		displayFolder: Forecasting Category Trends
		lineageTag: 3579ace5-d07a-409c-95fd-d12b77b8a7fd

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Fourth Last Closed Month Ticket Count' =
			
			CALCULATE(
			    COUNT( DimTicket[Ticket ID]),CalendarDate[Is Fourth Closed Month]=TRUE()
			    )
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: 5de74566-82fe-47c5-af5e-86ef11a7517c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Third Last Closed Month Ticket Count' =
			
			CALCULATE(
			    COUNT( DimTicket[Ticket ID]),CalendarDate[Is Third Closed Month]=TRUE()
			    )
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: 044283cd-2a7e-40b3-ad47-a1eff49d866e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Fifth Last Closed Month Ticket Count' =
			
			CALCULATE(
			    COUNT( DimTicket[Ticket ID]),CalendarDate[Is Fifth Closed Month]=TRUE()
			    )
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: 151c03a2-4b1c-44a3-94b6-931667a5e228

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Last Closed Month Ticket Count' =
			
			CALCULATE(
			    COUNT( DimTicket[Ticket ID]),CalendarDate[Is Closed Month]=TRUE()
			    )
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: fbb86d8a-fcb7-4f19-9857-353edcdabb1d

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Monthly Trend' =
			
			VAR Index =
			    CALCULATE (
			        COUNTROWS ( DimTicket ),
			        PREVIOUSMONTH ( CalendarDate[Date] )
			    )
			RETURN
			    IF ( Index < [Ticket Count], 1,IF(Index = [Ticket Count],2, 0 ))
		formatString: #,0
		displayFolder: Forecasting Category Trends
		lineageTag: 5f933704-70bc-40fb-a0a3-8475df571356

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure '# Above/Below' =
			
			// IF (
			//   ISBLANK ( [Last Closed Month Ticket Count] ),
			    [Last Closed Month Ticket Count] - [Average of Previous 4 months Ticket Count]
			// )
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: Forecasting Category Trends
		lineageTag: eb8594bf-c81f-4cd8-adaa-1776502dc817

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure '% Above/Below' = DIVIDE([# Above/Below],[Average of Previous 4 months Ticket Count])
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Forecasting Category Trends
		lineageTag: d3229985-170c-4186-a72d-6e1cb0a33031

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PERCENTAGE_FORMATTING"]}

	/// Average Overall Replies from Engineers
	measure 'Average Replies' = ```
			
			
			VAR Numerator = CALCULATE( 
			    COUNT(DimTicketComment[Comment ID]), 
			    DimTicketComment[Author Role] IN {"agent","admin"}
			)
			VAR Denominator = COUNT(DimTicket[Ticket ID])
			RETURN
			    DIVIDE(Numerator, Denominator, BLANK())
			// IF(Denominator <> 0, Numerator / Denominator, BLANK())
			
			```
		formatString: #,0.00
		displayFolder: Average Measures
		lineageTag: 0a01267d-8bf5-4104-b8b0-0254406defa8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["INTEGER_FORMATTING"]}

	measure 'Public Replies Average' =
			
			DIVIDE (
			    CALCULATE (
			        [Public Replies Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 4c65c2e5-8d4f-4d6c-b218-1c07cfc7afb6

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Public Replies Count' = ```
			CALCULATE( 
			    COUNT(DimTicketComment[Comment ID]), 
			    DimTicketComment[Is Public Comment] = True, 
			    DimTicketComment[Author Role] IN {"agent","admin"})
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: bea9c852-2907-498c-8cf8-0269fa87fa79

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Internal Replies Count' = ```
			
			 CALCULATE( 
			    COUNT(DimTicketComment[Comment ID]), 
			    DimTicketComment[Is Public Comment] = False, 
			    DimTicketComment[Author Role] IN {"agent","admin"}
			 )
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 5789e951-9e83-4fde-b95d-231ddacaba27

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Internal Replies Average' =
			
			DIVIDE (
			    CALCULATE (
			        [Internal Replies Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 7411dcd9-362f-40ca-8aff-49520e3d5c7e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Public Replies all' = ```
			
			
			VAR Numerator = CALCULATE( 
			    COUNT(DimTicketComment[Comment ID]), 
			    DimTicketComment[Author Role] IN {"agent","admin"}
			)
			VAR Denominator = COUNT(DimTicket[Ticket ID])
			RETURN
			    DIVIDE(Numerator, Denominator, BLANK())
			// IF(Denominator <> 0, Numerator / Denominator, BLANK())
			```
		formatString: #,0.00
		displayFolder: Average Measures
		lineageTag: 40131b58-6196-4b86-8cb0-e4c1db6c4f08

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Squad Actual V2' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR DistinctSquads = 
			    VALUES ( SquadTeamBridge[Squad] )
			VAR IsSquadFiltered = 
			    ISFILTERED ( SquadTeamBridge[Squad] )
			VAR DaysToClearBacklog =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [Days To Clear Backlog],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [Days To Clear Backlog]
			    )
			VAR TimetoResolve =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [Time to Resolve P75 Calendar Days]
			    )
			VAR SupportCSAT =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [Support CSAT],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [Support CSAT]
			    )
			VAR IRMetUrgent =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [% IR Met Urgent],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [% IR Met Urgent]
			    )
			VAR IRMetHigh =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [% IR Met High],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [% IR Met High]
			    )
			VAR IRMet =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [% IR Met],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [% IR Met]
			    )
			VAR EscalationRate =
			    IF (
			        IsSquadFiltered,
			        CALCULATE (
			            [Escalation Rate % Total],
			            FILTER ( DimSquad, DimSquad[Squad] IN DistinctSquads )
			        ),
			        [Escalation Rate % Total]
			    )
			        
			RETURN
			    SWITCH (
			        TRUE (),
			        SelectedMetric = "Days to Clear Backlog", FORMAT ( DaysToClearBacklog, "#,0" ),
			        SelectedMetric = "Time to Resolve P75", FORMAT ( TimetoResolve, "#,0" ),
			        SelectedMetric = "CSAT", FORMAT ( SupportCSAT, "#,0.00" ),
			        SelectedMetric = "IR Met % Urgent", FORMAT ( IRMetUrgent, "#,0%" ),
			        SelectedMetric = "IR Met % High", FORMAT ( IRMetHigh, "#,0%" ),
			        SelectedMetric = "IR Met %", FORMAT ( IRMet, "#,0%" ),
			        SelectedMetric = "Escalation Rate %", FORMAT ( EscalationRate, "#,0%" ),
			        BLANK ()
			    )
			
			```
		displayFolder: SHI Measures V2
		lineageTag: 4c5f939f-af1c-4ddb-a57d-85ca5ae0ed36

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_DUPLICATE_MEASURES","OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING","FILTER_COLUMN_VALUES"]}

	measure 'Index Points V2' = ```
			
			VAR MaxValue = [Max]
			VAR Actual =
			    DIVIDE (
			        IFERROR ( VALUE ( SUBSTITUTE ( [Squad Actual V2], "%", "" ) ), BLANK () ),
			        MaxValue
			    )
			VAR Base =
			    DIVIDE ( IFERROR ( VALUE ( SUBSTITUTE ( [Base V2], "%", "" ) ), BLANK () ), MaxValue )
			VAR Target =
			    DIVIDE (
			        IFERROR ( VALUE ( SUBSTITUTE ( [Target V2], "%", "" ) ), BLANK () ),
			        MaxValue
			    )
			VAR A = DIVIDE ( ( Actual - Base ), ( Target - Base ) )*50+30
			VAR MAXI =
			    MAX ( A, [Min] )
			VAR Result =
			    MIN ( MAXI, MaxValue )
			RETURN
			    IF(NOT(ISBLANK(Actual)), Result)
			
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: ee70127b-19cc-499e-8912-e7a241a95996

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["AVOID_USING_THE_IFERROR_FUNCTION","OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Base V2' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR BaseValue =
			    MAX ( 'SHI Metrics V2'[Base] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "Days to Clear Backlog", FORMAT ( BaseValue, "#,0.00" ),
			        "IR Met % High", FORMAT ( BaseValue, "#,0%" ),
			        "IR Met % Urgent", FORMAT ( BaseValue, "#,0%" ),
			        "IR Met %", FORMAT ( BaseValue, "#,0%" ),
			        "CSAT", FORMAT ( BaseValue, "#,0.00" ),
			        "Time to Resolve P75", FORMAT ( BaseValue, "#,0.00" ),
			        "Escalation Rate %", FORMAT ( BaseValue, "#,0%" ),
			        BLANK ()
			    )
			
			```
		displayFolder: SHI Measures V2
		lineageTag: 8be4fc86-992a-46a2-8e4f-0a23c52ba20e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING","FILTER_COLUMN_VALUES"]}

	measure 'Target V2' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR TargetValue =
			    MAX ( 'SHI Metrics V2'[Target] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "Days to Clear Backlog", FORMAT ( TargetValue, "#,0" ),
			        "IR Met % High", FORMAT ( TargetValue, "#,0%" ),
			        "IR Met % Urgent", FORMAT ( TargetValue, "#,0%" ),
			        "IR Met %", FORMAT ( TargetValue, "#,0%" ),
			        "CSAT", FORMAT ( TargetValue, "#,0.00" ),
			        "Time to Resolve P75", FORMAT ( TargetValue, "#,0" ),
			        "Escalation Rate %", FORMAT ( TargetValue, "#,0%" ),
			        BLANK ()
			    )
			
			```
		displayFolder: SHI Measures V2
		lineageTag: aa7a52fb-a41f-4120-ba12-1942890d3617

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Squad Weight V2' = ```
			
			IF (
			    ISFILTERED ( SquadTeamBridge[Squad] ),
			    IF (
			        ISINSCOPE ( DimSHIMeasures[Metric V2] ),
			        VAR temp =
			            CALCULATE (
			                SUM ( 'SHI Metrics V2'[Weight] ),
			                FILTER (
			                    ALLSELECTED ( DimSHIMeasures[Metric V2] ),
			                    [Squad Actual V2] <> BLANK()
			                )
			            )
			        RETURN
			            IF (
			                [Squad Actual V2] <> BLANK(),
			                CALCULATE (
			                    DIVIDE ( SUM ( 'SHI Metrics V2'[Weight] ), temp ),
			                    FILTER (
			                        ALLSELECTED ( DimSquad ),
			                        DimSquad[Squad] = SELECTEDVALUE ( SquadTeamBridge[Squad] )
			                    )
			                )
			            ),
			        VAR temp =
			            CALCULATE ( SUM ( SHITeamWeight[Team Weight] ), ALLSELECTED ( DimTeam[Team] ) )
			        RETURN
			            DIVIDE ( SUM ( SHITeamWeight[Team Weight] ), temp )
			    ),
			    IF (
			        ISINSCOPE ( DimSHIMeasures[Metric V2] ),
			        VAR temp =
			            CALCULATE (
			                SUM ( 'SHI Metrics V2'[Weight] ),
			                FILTER (
			                    ALLSELECTED ( DimSHIMeasures[Metric V2] ),
			                    [Squad Actual V2] <> BLANK()
			                )
			            )
			        RETURN
			            IF (
			                [Squad Actual V2] <> BLANK(),
			                DIVIDE ( SUM ( 'SHI Metrics V2'[Weight] ), temp )
			            ),
			        VAR temp =
			            CALCULATE ( SUM ( SHITeamWeight[Team Weight] ), ALLSELECTED ( DimTeam[Team] ), DimSHIMeasures[Metric V2] <> "Var to Required Capacity" )
			        RETURN
			            DIVIDE ( SUM ( SHITeamWeight[Team Weight] ), temp )
			    )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: SHI Measures V2
		lineageTag: 83c47055-0cec-48d2-88f2-6a9568e1f0b3

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Weighted Index Points V2' = ```
			
			[Index Points V2] * [Squad Weight V2]
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: ff1fc351-46fc-4b4e-957a-9fd8daabefca

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support Health Index (Team) V2' = ```
			
			VAR temp =
			    ALLSELECTED ( DimSHIMeasures[Metric V2] )
			VAR res =
			    SUMX (
			        FILTER (
			            ALLSELECTED ( DimSHIMeasures[Metric V2] ),
			            DimSHIMeasures[Metric V2] IN temp
			        ),
			        ROUND([Index Points V2] * [Squad Weight V2],0)
			    )
			RETURN IF(res > 100, 100, res)
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 1de8ecfa-2c80-4c1f-9507-9670b8f7e4d8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support Health Index (Overall) V2' = ```
			
			SUMX (
			    SUMMARIZE (
			        DimTeam,
			        DimTeam[Team],
			        "TeamSHI", [Support Health Index (Team) V2] * [Squad Weight V2]
			    ),
			    [TeamSHI]
			)
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 7a3c4378-f55c-4414-b6e4-743aa9ec289e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'SHI at date level (overall) V2' = ```
			
			    IF (
			        ISFILTERED ( CalendarDate[Month] ),
			        [Support Health Index (Overall) V2],
			        CALCULATE (
			            [Support Health Index (Overall) V2],
			            DATESINPERIOD ( CalendarDate[Date], LASTDATE ( CalendarDate[Date] ), -1, MONTH )
			        )
			    )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 80a296df-6593-4f0e-97d9-9f33e5d7b3c0

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'SHI at date level V2' =
			
			IF (
			    ISFILTERED ( CalendarDate[Month] ),
			    [Support Health Index (Team) V2],
			    CALCULATE (
			        [Support Health Index (Team) V2],
			        DATESINPERIOD ( CalendarDate[Date], LASTDATE ( CalendarDate[Date] ), -1, MONTH )
			    )
			)
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: de6490ac-c5e3-48a5-8914-c55ae80a33df

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Enterprise SHI V2' = ```
			
			VAR EnterpriseSHI =
			    CALCULATE ( [SHI at date level V2], KEEPFILTERS ( DimTeam[Team] = "Enterprise" ) )
			RETURN
			    IF ( EnterpriseSHI, EnterpriseSHI, " " )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 9b2deb01-c19d-47bc-b739-e7ecc5398443

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Premium Plus SHI V2' = ```
			
			VAR PremiumPlusSHI =
			    CALCULATE (
			        [SHI at date level V2],
			        KEEPFILTERS ( DimTeam[Team] = "Premium Plus" )
			    )
			RETURN
			    IF ( PremiumPlusSHI, PremiumPlusSHI, " ")
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 77ead8ff-3a60-4cea-839f-c0c5b488acbb

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Premium Standard SHI V2' = ```
			
			VAR PremiumStandardSHI =
			    CALCULATE (
			        [SHI at date level V2],
			        KEEPFILTERS ( DimTeam[Team] = "Premium Standard" )
			    )
			RETURN
			    IF ( PremiumStandardSHI, PremiumStandardSHI, " " )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 120d42b1-a1f7-42ad-8664-cbe66adc9aae

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Security & Revenue SHI V2' = ```
			
			VAR SecuritySHI =
			    CALCULATE (
			        [SHI at date level V2],
			        KEEPFILTERS ( DimTeam[Team] = "Security & Revenue Support" )
			    )
			RETURN
			    IF ( SecuritySHI, SecuritySHI, " " )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: ae51bdc9-6153-4f48-af72-7d5ae9483191

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Technical SHI V2' = ```
			
			VAR TechnicalSHI =
			    CALCULATE (
			        [SHI at date level V2],
			        KEEPFILTERS ( DimTeam[Team] = "Technical" )
			    )
			RETURN
			    IF ( TechnicalSHI, TechnicalSHI, " " )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 8ac1b632-f6ce-4728-a3a6-680acd358695

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure Title = IF(ISFILTERED(DimSHIMeasures[Metric V2]), MAX('SHI V2 Field Parameter'[Parameter]), "")
		displayFolder: SHI Measures V2
		lineageTag: 919d57d0-d14e-4e22-ab69-d4fda8a795c7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

	measure 'GitHub Issues Average' =
			
			DIVIDE (
			    CALCULATE (
			        [Github Issues Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 060800eb-5def-4507-a718-1ed597bb1105

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'GitHub Pull Requests Average' =
			
			DIVIDE (
			    CALCULATE (
			        [PR Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 4c810448-2e07-4223-a9df-c8a54f78eb8f

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Updated Ticket Count Average' =
			
			DIVIDE (
			    CALCULATE (
			        [Updated Ticket Count],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 896b7983-cc97-4960-ac3d-2ca17d1ebbf7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'SHI By Squad' = ```
			
			VAR SquadSummary =
			    SUMMARIZE ( SquadTeamBridge,
			        SquadTeamBridge[Squad], "Average SHI", [SHI at date level V2] )
			
			RETURN
			    IF (
			        ISINSCOPE ( SquadTeamBridge[Squad] ),
			        AVERAGEX ( SquadSummary, [Average SHI] ),AVERAGEX ( SquadSummary, [Average SHI] )
			    )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 26679d3b-91e5-40f9-a429-9e944c49ad3c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Median First Reply Time in Hours Calendar' =
			
			DIVIDE ( MEDIAN ( FactTicket[time_to_reply_minutes_calendar_minutes] ), 60 )
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: acd5e7ac-77d2-4f22-9c35-a7deace3d1bc

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Median First Reply Time in Minutes Calendar' =
			
			MEDIAN ( FactTicket[time_to_reply_minutes_calendar_minutes] )
		formatString: #,0.00
		displayFolder: Median Measures
		lineageTag: ec8c0d04-0a75-46d2-9c9b-07feeb321786

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure '# of Summaries Submitted (RLS)' = CALCULATE([# of Summaries Submitted], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0864fa9b-8614-48c7-a93e-a4906ae8fcde

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure '# of Summaries Submitted All CRE (RLS)' = CALCULATE([# of Summaries Submitted All CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 65035178-75e3-45ff-a502-0eb6ea96d679

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Customer Complexity (RLS)' = CALCULATE([Average Customer Complexity], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: dc08b5df-ad64-42c4-918c-c0a86126bc27

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Customer Complexity All CRE (RLS)' = CALCULATE([Average Customer Complexity All CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: e7d03bcd-4b72-4396-9249-a2be2145b3af

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average Customer Sentiment All CRE (RLS)' = CALCULATE([Average Customer Sentiment All CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: b1182399-dce7-48b8-b6ff-90a397eff919

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Average IR Met % High All CRE (RLS)' = CALCULATE([Average IR Met % High All CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0%;-#,0%;#,0%
		displayFolder: RLS Measures Testing
		lineageTag: ff444827-7a5c-4b39-a6ab-2a4418654ff7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Average Total Technical Advisory Hours All CRE (RLS)' = CALCULATE([Average Total Technical Advisory Hours All CRE], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 3b992476-b764-41e0-8735-78875e010318

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Total Technical Advisory Hours Used (RLS)' = CALCULATE([Average Total Technical Advisory Hours Used], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 2eaa42dc-daf6-432c-96f8-d92997f2ce07

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'GitHub Pull Requests Average (RLS)' = CALCULATE([GitHub Pull Requests Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 831f3112-5510-416e-851d-4a2aa585dcad

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Internal Replies Average (RLS)' = CALCULATE([Internal Replies Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 5c11b31f-a813-4cdb-8590-07c37497b0fa

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Internal Replies Count (RLS)' = CALCULATE([Internal Replies Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 4ef1ff82-2f3a-413d-93bc-ea75c1590642

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Solved Ticket Average (RLS)' = CALCULATE([Solved Ticket Average], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 4608c5c5-df33-4d2e-9895-b92f781fad01

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Average Customer Sentiment (RLS)' = CALCULATE([Average Customer Sentiment], TREATAS(VALUES(RLSTable[ic_handle]), DimCRECustomerMonthlySummary[CRE Assigned Handle]))
		formatString: #,0.00
		displayFolder: RLS Measures Testing
		lineageTag: 0e2287ed-0fb1-407b-a200-21c2d2483bf4

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Escalated Count YTD Snapshot' = ```
			
			
			CALCULATE (
			    SUM ( FactMonthlyEscalationsCount[Escalation Count] ),
			    DATESYTD ( CalendarDate[Date], "6-30" )
			)
			
			
			```
		formatString: 0
		displayFolder: Count Measures
		lineageTag: a45f1874-c131-4fb9-9301-387b2ef1a830

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalated Count YTD Snapshot LM' =
			
			IF (
			    OR ( MAX ( CalendarDate[Month] ) = "May 2024", MAX ( CalendarDate[Month of Year] ) = 7 ),
			    BLANK(),
			    CALCULATE (
			        [Escalated Count YTD Snapshot],
			        CalendarDate[Date] <= EOMONTH ( MAX ( CalendarDate[Date] ), -1 )
			    )
			)
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 157a4c4c-0673-4ff0-a7c7-ad63396609aa

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalated Count Prior to Current Month' = ```
			
			IF (
			    ISBLANK ( [Escalated Count YTD Snapshot] ),
			    BLANK (),
			    [Escalated Count YTD Snapshot] - [Escalated count new] - [Escalated Count YTD Snapshot LM]
			)
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 16604f49-601b-44f2-9a97-f6a85df74d9b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Escalation Rate % (Upto Prior Month)' = ```
			
			ROUND (
			    DIVIDE (
			        [Escalated Count Prior to Current Month],
			        [Ticket Count]
			    ),
			    2
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 2fb8f51e-acf2-4887-bc39-247676bdbfab

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Escalation Rate % Total' = ```
			
			IF (
			    MAX ( CalendarDate[Date] )
			        <= DATE ( 2024, 5, 31 ),
			    BLANK (),
			    [Escalation Rate % new] + [Escalation Rate % (Upto Prior Month)]
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Rate Measures
		lineageTag: 61c8c117-76cf-4597-ae4c-5b2606d9b31d

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'SHI By Region' = ```
			
			VAR RegionSummary =
			    SUMMARIZE (DimRegion,
			        DimRegion[Region Name], "Average SHI", [SHI at date level V2] )
			RETURN
			    IF (
			        ISINSCOPE ( DimRegion[Region Name] ),
			        AVERAGEX ( RegionSummary, [Average SHI] ),
			        AVERAGEX ( RegionSummary, [Average SHI] )
			    )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: b00f774f-7735-42cf-88a8-c1b0d36dfc22

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'SHI By Team' = ```
			
			VAR TeamSummary =
			    SUMMARIZE ( DimTeam, DimTeam[Team], "Team SHI", [SHI at date level V2] )
			RETURN
			    IF (
			        ISINSCOPE ( DimTeam[Team] ),
			        [SHI at date level V2],
			        AVERAGEX ( TeamSummary, [Team SHI] )
			    )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 8804a05d-d471-437c-8154-cebaf9613c77

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Days to Clear Backlog (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [Days To Clear Backlog],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [Days To Clear Backlog]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0
		displayFolder: Deep Dive Metrics
		lineageTag: fb19d6bb-b3d4-494b-bc29-ad26da69d3e8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Support CSAT (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [Support CSAT],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [Support CSAT]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0.00
		displayFolder: Deep Dive Metrics
		lineageTag: ac0dd42c-d4cd-4614-bda2-075d48c04b27

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Time to Resolve (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [Time to Resolve P75 Calendar Days]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0
		displayFolder: Deep Dive Metrics
		lineageTag: 3cbd90ce-c1d8-4999-9bb4-44c3e8f859d8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Var to Required Capacity (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ) || ISFILTERED ( DimRegion[Region Name] )
			            || ISFILTERED ( DimProduct ),
			        BLANK (),
			        [Var to Required Capacity]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 69bcc356-632d-4ce4-96b9-d6ec70408b45

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% IR Met High (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [% IR Met High],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [% IR Met High]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: b0f80011-7183-4b52-9148-93c059049928

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% IR Met Urgent (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [% IR Met Urgent],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [% IR Met Urgent]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: f422b704-1a06-46a7-a3c6-2edea6e6e32a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% IR Met (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric ] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    IF (
			        ISFILTERED ( SquadTeamBridge[Squad] ),
			        CALCULATE (
			            [% IR Met],
			            FILTER ( DimSquad, DimSquad[Squad] IN VALUES ( SquadTeamBridge[Squad] ) )
			        ),
			        [% IR Met]
			    ),
			    BLANK ()
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 522672ad-4cae-4b42-ad94-e0473545a651

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure Goal = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR TargetValue =
			    MAX ( 'SHI Metrics V2'[Target] )
			RETURN
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] )
			            IN {
			                "Enterprise",
			                "Premium Plus",
			                "Premium Standard",
			                "Security & Revenue Support",
			                "Technical"
			            },
			        SWITCH (
			            SelectedMetric,
			            "Days to Clear Backlog", VALUE ( FORMAT ( TargetValue, "#,0" ) ),
			            "CSAT", VALUE ( FORMAT ( TargetValue, "#,0.00" ) ),
			            "Time to Resolve P75", VALUE ( FORMAT ( TargetValue, "#,0" ) ),
			            BLANK ()
			        )
			    )
			
			```
		displayFolder: Deep Dive Metrics
		lineageTag: 61aaa6b0-7b48-4375-a7ae-2eae7504fbb0

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING","PROVIDE_FORMAT_STRING_FOR_MEASURES"]}

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'SHI By Product' = ```
			
			VAR TeamSummary =
			    SUMMARIZE ( DimProduct,
			        DimProduct[Product Pillar], "Average SHI", [SHI at date level V2] )
			VAR ProductFeature = 
			    SUMMARIZE ( DimProduct,
			        DimProduct[Product Feature], "Product SHI", [SHI at date level V2] )
			RETURN
			    IF (
			        ISINSCOPE ( DimProduct[Product Feature] ),
			        AVERAGEX ( TeamSummary, [Average SHI] ),   AVERAGEX ( ProductFeature, [Product SHI] ) 
			    )
			
			```
		formatString: #,0
		displayFolder: SHI Measures V2
		lineageTag: 26abfd11-082a-496e-b560-ae44efcee145

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is Sliced by Assignee, Manager' = ```
			
			IF (
			    OR (
			        ISFILTERED ( DimAssignee[Assignee Name] ),
			        ISFILTERED ( DimAssignee[Current Manager Name] )
			    ),
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: ff4b4557-7367-42d9-9ffa-239a4342dde1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is Sliced by IC, Manager (RLS)' = ```
			
			IF (
			    OR (
			        ISFILTERED ( RLSTable[IC Name] ),
			        ISFILTERED ( RLSTable[manager_name] )
			    ),
			    1,
			    2
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: e7744062-e79b-43e9-ba98-4c2457ee940e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Tickets Updated with Internal Comment Individual (RLS)' = CALCULATE([Tickets Updated with Internal Comment Individual], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 5a6b1fe7-e96d-4c05-83b8-65e515944b20

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Tickets Updated with Internal Comment Group (RLS)' = CALCULATE( [Tickets Updated with Internal Comment Group], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]) )
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 6b24ac5c-f05a-4c20-aaba-84fdd3adb376

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Is sliced by CRE (RLS)' = ```
			
			IF ( ISFILTERED ( RLSTable[CRE Assigned Name] ), 1, 2 )
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 3ff7669b-6a15-438e-943b-754d367ad054

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Goal Percent' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR TargetValue =
			    MAX ( 'SHI Metrics V2'[Target] )
			RETURN
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] )
			            IN {
			                "Enterprise",
			                "Premium Plus",
			                "Premium Standard",
			                "Security & Revenue Support",
			                "Technical"
			            },
			        SWITCH (
			            SelectedMetric,
			            "IR Met % High", TargetValue,
			            "IR Met % Urgent", TargetValue,
			            "IR Met %", TargetValue,
			            "Var to Required Capacity", TargetValue,
			            "Escalation Rate %", TargetValue,
			            BLANK ()
			        )
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 0467ff6f-8e1f-4dbe-882c-9e8b7c8fff92

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Count Overall Level of Effort' = ```
			
			COUNT ( FactCRECustomerMonthlySummary[Overall Level of Effort Number] )
			
			```
		formatString: #,0
		lineageTag: 65bc39c7-69ea-4526-b978-4e8de736a671

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Public Replies Count (RLS)' = CALCULATE([Public Replies Count], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 061917a7-c659-4980-b17c-2b3c168f15c4

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Tickets Updated with Internal Comment Individual' = ```
			
			CALCULATE (
			    DISTINCTCOUNT (FactTicketComment[ticket_id]),
			    // change to count from ticket comment instead not for dimticket
			    DimTicketComment[Is Public Comment]
			        == FALSE (),
			    DimTicketComment[Is Automated Comment]
			        == FALSE (),
			    FactTicketComment[Comment Count] > 1,
			    USERELATIONSHIP ( DimAssignee[Zendesk User ID], FactTicketComment[author_zendesk_id] )
			    )
			 
			//  CALCULATE(
			//     DISTINCTCOUNT(DimTicket[Ticket ID]),
			//     DimTicketComment[Is Public Comment] = FALSE,
			//     DimTicketComment[Is Automated Comment] = FALSE,
			//     DimTicketComment[Comment ID]>1,
			//     USERELATIONSHIP(DimAssignee[Zendesk User ID],FactTicketComment[author_zendesk_id])
			//  )
			
			```
		formatString: 0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 81251e28-f282-45a4-880f-2301a4f046f6

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Tickets Updated with Internal Comment Group' =
			
			DIVIDE (
			    CALCULATE (
			        [Tickets Updated with Internal Comment Individual],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    CALCULATE (
			    [Total Assignees],
			      USERELATIONSHIP(DimAssignee[Zendesk User ID],FactTicketComment[author_zendesk_id])
			    )
			)
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 5f11c88d-4af8-40b1-870e-91aa3364f53b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Logged In User' = IF ( DISTINCTCOUNT ( RLSTable[manager_handle] ) > 1, "", "Welcome " & MAX ( RLSTable[manager_handle] ) )
		displayFolder: RLS Measures Testing
		lineageTag: 3434ad43-7ba9-4315-afcd-cac30f5c9de8

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Is Sliced by Cost Center (RLS)' = ```
			
			IF ( ISFILTERED ( RLSTable[Cost Center] ), 1, 2 )
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: d8062b4b-f112-4cd4-b551-a7a6debc4169

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Deep Dive Conditional Formatting' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			VAR Target =
			    MAX ( 'SHI Metrics V2'[Target] )
			VAR TargetValue =
			    IF (
			        SELECTEDVALUE ( DimTeam[Team] )
			            IN {
			                "Enterprise",
			                "Premium Plus",
			                "Premium Standard",
			                "Security & Revenue Support",
			                "Technical"
			            },
			        SWITCH (
			            SelectedMetric,
			            "CSAT", Target,
			            "Days to Clear Backlog", Target,
			            "Time to Resolve P75", Target,
			            "IR Met % High", Target,
			            "IR Met % Urgent", Target,
			            "IR Met %", Target,
			            "Var to Required Capacity", Target,
			            "Escalation Rate %", Target,
			            BLANK ()
			        )
			    )
			VAR MetricValue =
			    SWITCH (
			        SelectedMetric,
			        "CSAT", [Index Points V2],
			        "Days to Clear Backlog", [Index Points V2],
			        "Time to Resolve P75", [Index Points V2],
			        "IR Met % High", [Index Points V2],
			        "IR Met % Urgent", [Index Points V2],
			        "IR Met %", [Index Points V2],
			        "Var to Required Capacity", [Index Points V2],
			        "Escalation Rate %", [Index Points V2],
			        BLANK ()
			    )
			 VAR ActualValue =
			    SWITCH (
			        SelectedMetric,
			        "CSAT", [Support CSAT (DD)],
			        "Days to Clear Backlog", [Days to Clear Backlog (DD)],
			        "Time to Resolve P75", [Time to Resolve (DD)],
			        "IR Met % High", [% IR Met High (DD)],
			        "IR Met % Urgent", [% IR Met Urgent (DD)],
			        "IR Met %", [% IR Met (DD)],
			        "Var to Required Capacity", [Var to Required Capacity (DD)],
			        "Escalation Rate %", [Escalation Rate % (DD)],
			        BLANK ()
			    )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "CSAT", IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "Days to Clear Backlog",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "Time to Resolve P75",   IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "IR Met % High",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "IR Met % Urgent",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "IR Met %",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "Var to Required Capacity",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" ))),
			        "Escalation Rate %",  IF ( MetricValue >=0 &&  MetricValue< 30, "Red", IF(MetricValue >=30 && MetricValue <80,"#d7962e", IF(MetricValue >=80, "Green" )))
			    )
			 
			```
		displayFolder: Deep Dive Metrics
		lineageTag: 6c853472-e3fa-440b-a0b8-d49c46f640b5

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure '% Ticket Volume CSAT' = ```
			
			CALCULATE (
			    [Survey Response Rate],
			    KEEPFILTERS ( NOT ( DimTicketCategory[Standardized Category Name]
			        IN {
			            "Health Check",
			            "Not GitHub",
			            "Not Support",
			            "Refer to Sales",
			            "Refer to Finance"
			        } ) )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: aadd70c4-ee3c-41be-918c-985caa991ba4

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% Ticket Volume IR Met' = ```
			
			DIVIDE (
			    [IR Met Ticket Count],
			    [Ticket Count]
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 51205b21-595f-472c-8a72-182db2a702ad

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% Ticket Volume IR Met High' = ```
			
			VAR SelectedTeam =
			    MAX ( DimTeam[Team] )
			VAR IR_Met_Ticket_Count =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "high" )
			    )
			VAR IR_Met_Ticket_Count_PremiumPlus =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			        KEEPFILTERS ( DimTeam[Team] = "Premium Plus" )
			    )
			VAR IR_Met_Ticket_Count_PremiumStandard =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			        KEEPFILTERS ( DimTeam[Team] = "Premium Standard" )
			    )
			VAR IR_Met_Ticket_Count_Enterprise =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "high" ),
			        KEEPFILTERS ( DimTicketTag[Tag Name] <> "closed_by_merge" )
			    )
			RETURN
			    DIVIDE (
			        SWITCH (
			            SelectedTeam,
			            "Premium Plus", IR_Met_Ticket_Count_PremiumPlus,
			            "Premium Standard", IR_Met_Ticket_Count_PremiumStandard,
			            "Enterprise", IR_Met_Ticket_Count_Enterprise,
			            IR_Met_Ticket_Count
			        ),
			        [Ticket Count]
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 968cc7dd-199c-4103-ba7b-43ad7b39ed0b

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% Ticket Volume IR Met Urgent' = ```
			
			VAR SelectedTeam =
			    MAX ( DimTeam[Team] )
			VAR IR_Met_Ticket_Count =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "urgent" )
			    )
			VAR IR_Met_Ticket_Count_PremiumPlus =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			        KEEPFILTERS ( DimTeam[Team] = "Premium Plus" )
			    )
			VAR IR_Met_Ticket_Count_PremiumStandard =
			    CALCULATE (
			        [IR Met Ticket Count],
			        KEEPFILTERS ( DimTicket[First Priority] = "urgent" ),
			        KEEPFILTERS ( DimTeam[Team] = "Premium Standard" )
			    )
			RETURN
			    DIVIDE (
			        SWITCH (
			            SelectedTeam,
			            "Premium Plus", IR_Met_Ticket_Count_PremiumPlus,
			            "Premium Standard", IR_Met_Ticket_Count_PremiumStandard,
			            IR_Met_Ticket_Count
			        ),
			        [Ticket Count]
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: ff654b31-1392-4b66-9e52-80f19e0cfe4e

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure '% Ticket Volume Backlog' = ```
			
			DIVIDE ( [Backlog Last day Month], [Ticket Count] )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: 3492915b-353c-4120-a7d1-26eee2edc822

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'Ticket Volume' = ```
			
			VAR SelectedMetric =
			    MAX ( DimSHIMeasures[Metric V2] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "Days to Clear Backlog", [% Ticket Volume Backlog],
			        "IR Met % High", [% Ticket Volume IR Met High],
			        "IR Met % Urgent", [% Ticket Volume IR Met Urgent],
			        "IR Met %", [% Ticket Volume IR Met],
			        "CSAT", [% Ticket Volume CSAT],
			        "N/A"
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: f9a3ea05-e60c-4f4b-8a87-862c1a7640e7

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'IR Met Ticket Count' =
			CALCULATE (
			        [Ticket Count],
			        KEEPFILTERS ( DimTicket[Is Initial Response Met] = TRUE () ),
			        KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE () )
			    )
		formatString: #,0
		isHidden
		displayFolder: Deep Dive Metrics
		lineageTag: 03578c66-9c95-49d4-a147-8550531aec6b

		changedProperty = IsHidden

	measure 'Pull Request Replies (RLS)' = ```
			
			CALCULATE (
			    SUM ( FactICPR[Pull Request Replies] ),
			    TREATAS ( VALUES ( RLSTable[ic_handle] ), DimAssignee[Assignee Handle] )
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: c16a39eb-a3a2-4110-9eaa-3405fe6567b1

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'GitHub Issues Replies Count (RLS)' = ```
			
			CALCULATE (
			    [Github Issues Replies Count],
			    TREATAS ( VALUES ( RLSTable[ic_handle] ), DimAssignee[Assignee Handle] )
			)
			
			```
		displayFolder: RLS Measures Testing
		lineageTag: 983ac630-5a41-4c05-984c-b99a3f4879b3

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'Escalation Rate % (DD)' = ```
			
			IF (
			    SELECTEDVALUE ( DimSHIMeasures[Metric V2] )
			        IN {
			            "Days to Clear Backlog",
			            "IR Met % High",
			            "IR Met % Urgent",
			            "IR Met %",
			            "CSAT",
			            "Time to Resolve P75",
			            "Var to Required Capacity",
			            "Escalation Rate %"
			        },
			    // IF (
			    //     ISFILTERED ( SquadTeamBridge[Squad] ) || ISFILTERED ( DimRegion[Region Name] )
			    //         || ISFILTERED ( DimProduct ),
			    //     BLANK (),
			        [Escalation Rate % Total]
			    // ),
			    // BLANK ()
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Deep Dive Metrics
		lineageTag: bd0059c3-e3df-420e-9c15-7c6c81414c0d

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PERCENTAGE_FORMATTING"]}

	measure 'IR Met Total' = ```
			
			VAR selectedTeam =
			    SELECTEDVALUE ( DimTeam[Team] )
			RETURN
			    IF (
			        selectedTeam = "Premium Plus",
			        CALCULATE (
			            [Ticket Count],
			            KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			            USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			        ),
			        IF (
			            selectedTeam = "Premium Standard",
			            CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            ),
			            CALCULATE (
			                [Ticket Count],
			                KEEPFILTERS ( DimTicket[Is  Initial Response Eligible] = TRUE ),
			                USERELATIONSHIP ( DimInitialResponseAssignee[Zendesk User ID], DimAssignee[Zendesk User ID] )
			            )
			        )
			    )
			
			```
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 68eaedd7-b098-4d49-9323-f263f04863cf

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION"]}

	measure 'IR Met Total (RLS)' = CALCULATE([IR Met Total], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: 2a75416c-332f-4f95-a3dd-b4b0f54536b9

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'Actual (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %",
			            FORMAT (
			                CALCULATE ( [% IR Met], KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) ) ),
			                "#,0%"
			            ),
			        "IR Met % Urgent",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met Urgent],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) )
			                ),
			                "#,0%"
			            ),
			        "IR Met % High",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met High],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) )
			                ),
			                "#,0%"
			            ),
			        "Time to Resolve P75",
			            FORMAT (
			                CALCULATE (
			                    [Time to Resolve P75 Calendar Days],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) )
			                ),
			                "#,0"
			            ),
			        "CSAT",
			            FORMAT (
			                CALCULATE ( [Support CSAT], KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) ) ),
			                "#,0.00"
			            ),
			        "SHI Score",
			            FORMAT (
			                CALCULATE (
			                    [Support Health Index (Team) V2],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" ) )
			                ),
			                "#,0"
			            ),
			        "IPX",
			            " ",
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard
		lineageTag: bcba2858-531d-4f34-afd5-8325c8f38818

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Previous Month (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %",
			            FORMAT (
			                CALCULATE ( [% IR Met], KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) ) ),
			                "#,0%"
			            ),
			        "IR Met % Urgent",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met Urgent],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) )
			                ),
			                "#,0%"
			            ),
			        "IR Met % High",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met High],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) )
			                ),
			                "#,0%"
			            ),
			        "Time to Resolve P75",
			            FORMAT (
			                CALCULATE (
			                    [Time to Resolve P75 Calendar Days],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) )
			                ),
			                "#,0"
			            ),
			        "CSAT",
			            FORMAT (
			                CALCULATE ( [Support CSAT], KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) ) ),
			                "#,0.00"
			            ),
			        "SHI Score",
			            FORMAT (
			                CALCULATE (
			                    [Support Health Index (Team) V2],
			                    KEEPFILTERS ( CalendarDate[Month] = FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" ) )
			                ),
			                "#,0"
			            ),
			        "IPX",
			            " ",
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard
		lineageTag: 91da65cd-572c-4b12-b908-69e33c1d0199

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'QTD (S)' = ```
			
			SWITCH (
			    SELECTEDVALUE ( DimScorecard[Metric] ),
			    "IR Met %", FORMAT ( CALCULATE ( [% IR Met], DATESQTD ( CalendarDate[Date] ) ), "#,0%" ),
			    "IR Met % Urgent",
			        FORMAT (
			            CALCULATE ( [% IR Met Urgent], DATESQTD ( CalendarDate[Date] ) ),
			            "#,0%"
			        ),
			    "IR Met % High",
			        FORMAT (
			            CALCULATE ( [% IR Met High], DATESQTD ( CalendarDate[Date] ) ),
			            "#,0%"
			        ),
			    "Time to Resolve P75",
			        FORMAT (
			            CALCULATE (
			                [Time to Resolve P75 Calendar Days],
			                DATESQTD ( CalendarDate[Date] )
			            ),
			            "#,0"
			        ),
			    "CSAT",
			        FORMAT (
			            CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ),
			            "#,0.00"
			        ),
			    "SHI Score", "N/A",
			    "IPX", " ",
			    BLANK ()
			)
			
			```
		displayFolder: Scorecard
		lineageTag: bcd819c2-6553-4ade-96db-92f65bf0d099

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Q3 Last Completed Quarter (S)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			RETURN
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0%"
			            ),
			        "IR Met % Urgent",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met Urgent],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0%"
			            ),
			        "IR Met % High",
			            FORMAT (
			                CALCULATE (
			                    [% IR Met High],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0%"
			            ),
			        "Time to Resolve P75",
			            FORMAT (
			                CALCULATE (
			                    [Time to Resolve P75 Calendar Days],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0"
			            ),
			        "CSAT",
			            FORMAT (
			                CALCULATE (
			                    [Support CSAT],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0.00"
			            ),
			        "SHI Score",
			            FORMAT (
			                CALCULATE (
			                    [Support Health Index (Team) V2],
			                    KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                        && CalendarDate[Date] <= LastQuarterEndDate )
			                ),
			                "#,0"
			            ),
			        "IPX",
			            " ",
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard
		lineageTag: 23828718-ade7-49f9-9d16-7c472f874677

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["FILTER_COLUMN_VALUES","OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Last 6 Months Trend (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %", [% IR Met],
			        "IR Met % Urgent", [% IR Met Urgent],
			        "IR Met % High", [% IR Met High],
			        "Time to Resolve P75", [Time to Resolve P75 Calendar Days],
			        "CSAT", [Support CSAT],
			        "SHI Score", [Support Health Index (Team) V2],
			        BLANK ()
			    )
			```
		displayFolder: Scorecard
		lineageTag: dea87d88-72b0-4681-aa28-d7978b1f76a4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Target (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %", FORMAT ( MAX ( DimScorecard[Target] ), "#,0%" ),
			        "IR Met % Urgent", FORMAT ( MAX ( DimScorecard[Target] ), "#,0%" ),
			        "IR Met % High", FORMAT ( MAX ( DimScorecard[Target] ), "#,0%" ),
			        "Time to Resolve P75", FORMAT ( MAX ( DimScorecard[Target] ), "#,0" ),
			        "CSAT", FORMAT ( MAX ( DimScorecard[Target] ), "#,0.00" ),
			        "SHI Score", FORMAT ( MAX ( DimScorecard[Target] ), "#,0" ),
			        "IPX", " ",
			        BLANK ()
			    )
			```
		displayFolder: Scorecard
		lineageTag: 81fc8cb3-2321-4c15-a640-699b7b0f1774

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Actual (E)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.85,
			                "Red",
			                IF ( IRMetUrgent >= 0.85 && IRMetUrgent < 0.9, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.85,
			                "Red",
			                IF ( IRMetHigh >= 0.85 && IRMetHigh < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 10,
			                "Red",
			                IF ( TimetoResolveP75 <= 10 && TimetoResolveP75 > 6, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Enterprise
		lineageTag: 7ab04c5d-bbcb-44b2-94a3-f1bb9bbf9e62

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Q3 Last Completed Quarter (E)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.85,
			                "Red",
			                IF ( IRMetUrgent >= 0.85 && IRMetUrgent < 0.9, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.85,
			                "Red",
			                IF ( IRMetHigh >= 0.85 && IRMetHigh < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 10,
			                "Red",
			                IF ( TimetoResolveP75 <= 10 && TimetoResolveP75 > 6, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Enterprise
		lineageTag: 1cb5016d-619a-48d8-85df-2631302acc57

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Previous Month (E)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.85,
			                "Red",
			                IF ( IRMetUrgent >= 0.85 && IRMetUrgent < 0.9, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.85,
			                "Red",
			                IF ( IRMetHigh >= 0.85 && IRMetHigh < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 10,
			                "Red",
			                IF ( TimetoResolveP75 <= 10 && TimetoResolveP75 > 6, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Enterprise
		lineageTag: 3dfda0e2-9b1f-4acf-be31-4bedd442067a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG QTD (E)' = ```
			
			VAR IRMetUrgent =
			    ROUND ( CALCULATE ( [% IR Met Urgent], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR IRMetHigh =
			    ROUND ( CALCULATE ( [% IR Met High], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            DATESQTD ( CalendarDate[Date] )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND ( CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.85,
			                "Red",
			                IF ( IRMetUrgent >= 0.85 && IRMetUrgent < 0.9, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.85,
			                "Red",
			                IF ( IRMetHigh >= 0.85 && IRMetHigh < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 10,
			                "Red",
			                IF ( TimetoResolveP75 <= 10 && TimetoResolveP75 > 6, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Enterprise
		lineageTag: 284f857f-54ca-4d06-bd24-4852ee06a060

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Actual (PP)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 = 
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 19,
			                "Red",
			                IF ( TimetoResolveP75 <= 19 && TimetoResolveP75 > 15, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.35, "Red", IF ( CSAT >= 4.35 && CSAT < 4.65, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Plus
		lineageTag: fd801e37-2e81-4b98-9674-4be1cc4a5649

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Previous Month (PP)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 19,
			                "Red",
			                IF ( TimetoResolveP75 <= 19 && TimetoResolveP75 > 15, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.35, "Red", IF ( CSAT >= 4.35 && CSAT < 4.65, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Plus
		lineageTag: 513b3616-3689-492e-9bc2-339cb5098bfd

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Q3 Last Completed Quarter (PP)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 19,
			                "Red",
			                IF ( TimetoResolveP75 <= 19 && TimetoResolveP75 > 15, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.35, "Red", IF ( CSAT >= 4.35 && CSAT < 4.65, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Plus
		lineageTag: 63164ab8-3664-4d9f-9fa9-76ac535d43db

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG QTD (PP)' = ```
			
			VAR IRMetUrgent =
			    ROUND ( CALCULATE ( [% IR Met Urgent], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR IRMetHigh =
			    ROUND ( CALCULATE ( [% IR Met High], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            DATESQTD ( CalendarDate[Date] )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND ( CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 19,
			                "Red",
			                IF ( TimetoResolveP75 <= 19 && TimetoResolveP75 > 15, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.35, "Red", IF ( CSAT >= 4.35 && CSAT < 4.65, "Yellow", "Green" ) ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Plus
		lineageTag: 9e992ae6-b605-4516-a7c0-8647979c9c67

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Actual (PS)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 = 
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 15,
			                "Red",
			                IF ( TimetoResolveP75 <= 15 && TimetoResolveP75 > 11, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Standard
		lineageTag: 9e39315c-1e73-4810-ab77-53cca55904ba

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Previous Month (PS)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 15,
			                "Red",
			                IF ( TimetoResolveP75 <= 15 && TimetoResolveP75 > 11, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Standard
		lineageTag: b7044b0b-7dfa-4506-b9eb-3f656f2d3206

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Q3 Last Completed Quarter (PS)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			VAR IRMetUrgent =
			    ROUND (
			        CALCULATE (
			            [% IR Met Urgent],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR IRMetHigh =
			    ROUND (
			        CALCULATE (
			            [% IR Met High],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 15,
			                "Red",
			                IF ( TimetoResolveP75 <= 15 && TimetoResolveP75 > 11, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Standard
		lineageTag: 5bafb733-6fb1-4843-9271-ca63f098c51c

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG QTD (PS)' = ```
			
			VAR IRMetUrgent =
			    ROUND ( CALCULATE ( [% IR Met Urgent], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR IRMetHigh =
			    ROUND ( CALCULATE ( [% IR Met High], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            DATESQTD ( CalendarDate[Date] )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND ( CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met % Urgent",
			            IF (
			                IRMetUrgent < 0.9,
			                "Red",
			                IF ( IRMetUrgent >= 0.9 && IRMetUrgent < 0.95, "Yellow", "Green" )
			            ),
			        "IR Met % High",
			            IF (
			                IRMetHigh < 0.9,
			                "Red",
			                IF ( IRMetHigh >= 0.9 && IRMetHigh < 0.95, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 15,
			                "Red",
			                IF ( TimetoResolveP75 <= 15 && TimetoResolveP75 > 11, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Premium Standard
		lineageTag: 9958f586-2470-4406-9425-1064b45a80ba

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Tickets Updated with Internal Comment (Not  Assigned to IC RLS)' =
			
			CALCULATE([Tickets Updated with Internal Comment (Not  Assigned to IC)], TREATAS(VALUES(RLSTable[ic_handle]), FactTicketComment[author_handle]))
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: a73f180b-2f7b-461f-9986-7fe9def2785a

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","INTEGER_FORMATTING"]}

	measure 'RAG Actual (S&R)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 12,
			                "Red",
			                IF ( TimetoResolveP75 <= 12 && TimetoResolveP75 > 8, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 3.9, "Red", IF ( CSAT >= 3.9 && CSAT < 4.2, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Security & Revenue
		lineageTag: a0d61bcc-a367-44a3-8ac4-b521a2e6f61d

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Previous Month (S&R)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 12,
			                "Red",
			                IF ( TimetoResolveP75 <= 12 && TimetoResolveP75 > 8, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 3.9, "Red", IF ( CSAT >= 3.9 && CSAT < 4.2, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Security & Revenue
		lineageTag: dd56715e-ff4a-4b3a-bab4-a44156f0f079

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Q3 Last Completed Quarter (S&R)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 12,
			                "Red",
			                IF ( TimetoResolveP75 <= 12 && TimetoResolveP75 > 8, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 3.9, "Red", IF ( CSAT >= 3.9 && CSAT < 4.2, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Security & Revenue
		lineageTag: 44001f8c-8427-4b90-b578-28f7a0c296e2

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG QTD (S&R)' = ```
			
			VAR IRMet =
			    ROUND ( CALCULATE ( [% IR Met], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            DATESQTD ( CalendarDate[Date] )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND ( CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 12,
			                "Red",
			                IF ( TimetoResolveP75 <= 12 && TimetoResolveP75 > 8, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 3.9, "Red", IF ( CSAT >= 3.9 && CSAT < 4.2, "Yellow", "Green" ) ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Security & Revenue
		lineageTag: 4588ea74-d1a6-44d4-a32b-f90d79e8a579

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Actual (T)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 5,
			                "Red",
			                IF ( TimetoResolveP75 <= 5 && TimetoResolveP75 > 3, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Technical
		lineageTag: 7ebddf68-d3af-4a84-acea-04490a64b388

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Previous Month (T)' = ```
			
			VAR Target_Month =
			    FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Month] = Target_Month )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 5,
			                "Red",
			                IF ( TimetoResolveP75 <= 5 && TimetoResolveP75 > 3, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Technical
		lineageTag: 618526ff-dc9a-41c6-8685-f7064d9381d3

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG Q3 Last Completed Quarter (T)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			VAR IRMet =
			    ROUND (
			        CALCULATE (
			            [% IR Met],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND (
			        CALCULATE (
			            [Support CSAT],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        2
			    )
			VAR SHIScore =
			    ROUND (
			        CALCULATE (
			            [Support Health Index (Team) V2],
			            KEEPFILTERS ( CalendarDate[Date] >= LastQuarterStartDate
			                && CalendarDate[Date] <= LastQuarterEndDate )
			        ),
			        0
			    )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 5,
			                "Red",
			                IF ( TimetoResolveP75 <= 5 && TimetoResolveP75 > 3, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        "SHI Score",
			            IF (
			                SHIScore < 30,
			                "Red",
			                IF ( SHIScore >= 30 && SHIScore < 80, "Yellow", "Green" )
			            ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Technical
		lineageTag: 07f7c1dc-aaf1-484e-80c0-3b41d77a86db

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'RAG QTD (T)' = ```
			
			VAR IRMet =
			    ROUND ( CALCULATE ( [% IR Met], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR TimetoResolveP75 =
			    ROUND (
			        CALCULATE (
			            [Time to Resolve P75 Calendar Days],
			            DATESQTD ( CalendarDate[Date] )
			        ),
			        0
			    )
			VAR CSAT =
			    ROUND ( CALCULATE ( [Support CSAT], DATESQTD ( CalendarDate[Date] ) ), 2 )
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			RETURN
			    SWITCH (
			        SelectedMetric,
			        "IR Met %",
			            IF (
			                IRMet < 0.85,
			                "Red",
			                IF ( IRMet >= 0.85 && IRMet < 0.9, "Yellow", "Green" )
			            ),
			        "Time to Resolve P75",
			            IF (
			                TimetoResolveP75 > 5,
			                "Red",
			                IF ( TimetoResolveP75 <= 5 && TimetoResolveP75 > 3, "Yellow", "Green" )
			            ),
			        "CSAT",
			            IF ( CSAT < 4.2, "Red", IF ( CSAT >= 4.2 && CSAT < 4.5, "Yellow", "Green" ) ),
			        BLANK ()
			    )
			
			```
		displayFolder: Scorecard\Technical
		lineageTag: 4b9d292f-d1cc-48c4-8029-009a6a4c2b80

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["OBJECTS_WITH_NO_DESCRIPTION","PROVIDE_FORMAT_STRING_FOR_MEASURES","INTEGER_FORMATTING"]}

	measure 'Last 6 Months Trend Hover (Dynamic Title)' = ```
			
			VAR SelectedMetric =
			    SELECTEDVALUE ( DimScorecard[Metric] )
			VAR MetricGoal =
			    SELECTEDVALUE ( DimScorecard[Target] )
			RETURN
			    IF (
			        NOT ( ISBLANK ( SelectedMetric ) ),
			        "Last 6 Months Trend ( Goal: "
			            & FORMAT (
			                MetricGoal,
			                SWITCH (
			                    SelectedMetric,
			                    "IR Met %", "#, 0%",
			                    "IR Met % Urgent", "#,0%",
			                    "IR Met % High", "#,0%",
			                    "Time to Resolve P75", "#,0",
			                    "CSAT", "#,0.00",
			                    "SHI Score", "#,0",
			                    BLANK ()
			                )
			            ) & " )",
			        "Last 6 Months Trend"
			    )
			
			```
		displayFolder: Scorecard\Titles & Card
		lineageTag: 540eed53-d05c-48ba-aaf3-868cc5821276

	measure 'Last 6 Months Trend Hover Numeric (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "Time to Resolve P75", [Time to Resolve P75 Calendar Days],
			        "CSAT", [Support CSAT],
			        "SHI Score", [Support Health Index (Team) V2],
			        BLANK ()
			    )
			
			```
		formatString: #,0
		displayFolder: Scorecard
		lineageTag: 0aee0a66-02a4-4b1f-a810-6fd4c79b6dbe

	measure 'Last 6 Months Trend Hover Percentage (S)' = ```
			
			    SWITCH (
			        SELECTEDVALUE ( DimScorecard[Metric] ),
			        "IR Met %", [% IR Met],
			        "IR Met % Urgent", [% IR Met Urgent],
			        "IR Met % High", [% IR Met High],
			        BLANK ()
			    )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Scorecard
		lineageTag: 72b2ea05-5b97-46f6-ad1c-fd9658aad0cc

	measure 'URL (S)' = MAX ( DimScorecard[URL] )
		displayFolder: Scorecard
		lineageTag: e40a20f6-682b-46d6-825a-0431df000025

	measure 'Tickets Updated with Internal Comment (Not  Assigned to IC)' = ```
			
			CALCULATE (
			    DISTINCTCOUNT ( FactTicketComment[ticket_id] ),
			    DimTicketComment[Is Public Comment] == FALSE (),
			    DimTicketComment[Is Automated Comment] == FALSE (),
			    FactTicketComment[Comment Count] > 1,
			    FactTicketComment[Is Commented by Assignee] = 0,
			    USERELATIONSHIP ( DimAssignee[Zendesk User ID], FactTicketComment[assignee_zendesk_id] )
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: f6a1df18-2cd0-4817-8e23-8b0ee01aa3d9

	measure 'Tickets Updated with Internal Comment (Not  Assigned to IC) Group' = ```
			
			DIVIDE (
			    CALCULATE (
			        [Tickets Updated with Internal Comment (Not  Assigned to IC)],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    CALCULATE (
			        DISTINCTCOUNT ( FactTicketComment[author_zendesk_id] ),
			        FactTicketComment[Is Commented by Assignee] = 0,
			        FactTicketComment[Comment Count] > 1,
			        DimTicketComment[Is Automated Comment] = FALSE (),
			        DimTicketComment[Is Public Comment] = FALSE (),
			        USERELATIONSHIP ( DimAssignee[Zendesk User ID], FactTicketComment[assignee_zendesk_id] )
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: cb247edf-ab80-4af8-b2ed-ae79e8e5b7e1

	measure 'Last Completed Month (Dynamic Card)' = ```
			
			"Latest Completed Month: " & FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
			
			```
		displayFolder: Scorecard\Titles & Card
		lineageTag: 4c08d3bf-e08c-4e7a-88ae-5e0e306ddc3e

	measure 'Previous Completed Month (Dynamic Card)' = ```
			
			"Month Completed Prior to Latest Completed Month: "
			    & FORMAT ( EOMONTH ( TODAY (), -2 ), "MMM YYYY" )
			
			```
		displayFolder: Scorecard\Titles & Card
		lineageTag: 052b506e-3a0e-4231-819f-ec0f2c94e7ff

	measure 'Quarter To Date (Dynamic Card)' = ```
			
			"Current Quarter ("
			    & CALCULATE (
			        MIN ( CalendarDate[Fiscal Quarter Name] ),
			        CalendarDate[Date] = EOMONTH ( TODAY (), 0 )
			    ) & "): "
			    & CALCULATE ( MIN ( CalendarDate[Month] ), DATESQTD ( CalendarDate[Date] ) ) & " - "
			    & CALCULATE ( MAX ( CalendarDate[Month] ), DATESQTD ( CalendarDate[Date] ) )
			
			```
		displayFolder: Scorecard\Titles & Card
		lineageTag: 91112fb8-f414-4474-85c6-9b29b1d60a13

	measure 'Last Completed Quarter (Dynamic Card)' = ```
			
			VAR CurrentDate =
			    MAX ( CalendarDate[Date] )
			VAR CurrentQuarter =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Quarter] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR CurrentYear =
			    CALCULATE (
			        MAX ( CalendarDate[Fiscal Year] ),
			        CalendarDate[Date] = CurrentDate
			    )
			VAR LastQuarter =
			    IF ( CurrentQuarter = 1, 4, CurrentQuarter - 1 )
			VAR LastQuarterYear =
			    IF ( CurrentQuarter = 1, CurrentYear - 1, CurrentYear )
			VAR LastQuarterMonth =
			    SWITCH ( LastQuarter, 1, 9, 2, 12, 3, 3, 6 )
			VAR LastQuarterEndDate =
			    EOMONTH ( DATE ( LastQuarterYear, LastQuarterMonth, 1 ), 0 )
			VAR LastQuarterStartDate =
			    EOMONTH ( LastQuarterEndDate, -3 ) + 1
			RETURN
			    "Last Completed Quarter ("
			        & CALCULATE (
			            MIN ( CalendarDate[Fiscal Quarter Name] ),
			            CalendarDate[Date] = EOMONTH ( TODAY (), -3 )
			        ) & "): "
			        & FORMAT ( LastQuarterStartDate, "MMM YYYY" ) & " - "
			        & FORMAT ( LastQuarterEndDate, "MMM YYYY" )
			
			```
		displayFolder: Scorecard\Titles & Card
		lineageTag: c8331249-2574-4b58-967e-f0e681e9e521

	measure 'Pull Request Comments Indivdual' =
			
			COUNT ( FactICPRComment[Pull Request Comment ID] )
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 52a452bf-159c-4e9a-8885-12152cd83c0f

	measure 'Pull Request Comments Group' = ```
			
			DIVIDE (    
			    CALCULATE ( 
			        [Pull Request Comments Indivdual],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: dad97da5-aba8-4847-b41e-b4c43d69c9fe

	measure 'Issue Comments Indivdual' =
			
			COUNT ( FactICIssueComment[Issue Comment ID] )
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 7a495579-4e02-46b4-9856-f77fdac95f22

	measure 'Issue Comments Group' = ```
			
			DIVIDE (    
			    CALCULATE ( 
			        [Issue Comments Indivdual],
			        ALL ( DimAssignee[Assignee Name] ),
			        ALL ( DimManager[Manager Name] )
			    ),
			    [Total Assignees]
			)
			```
		formatString: #,0
		displayFolder: Comparison Metrics IC, Manager
		lineageTag: 00a0364e-1202-4a3b-b397-3cdc51c5e056

	measure 'Pull Request Comments Individual (RLS)' = ```
			
			CALCULATE (
			    [Pull Request Comments Indivdual],
			    TREATAS ( VALUES ( RLSTable[ic_handle] ), DimAssignee[Assignee Handle] )
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 49195b36-6e36-4789-b857-038c1bc9a67e

	measure 'Issue Comments Individual (RLS)' = ```
			
			CALCULATE (
			    [Issue Comments Indivdual],
			    TREATAS ( VALUES ( RLSTable[ic_handle] ), DimAssignee[Assignee Handle] )
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 990860ee-a9c3-440f-9f45-91dadd62c15a

	measure Metric =
			
			VAR temp =
			    IF ( ISFILTERED ( DimSHIMeasures[Metric ] ), COUNTROWS ( DimSHIMeasures ), 0 )
			RETURN
			    IF (
			        temp > 1,
			        "Multiple Metric Selected",
			        IF ( temp == 0, " ", MAX ( DimSHIMeasures[Metric ] ) )
			    )
		displayFolder: SHI Measures V2
		lineageTag: 0f14426b-a6e9-4daa-b5d0-c71a444c48e9

	measure 'Metric filter' = ```
			
			VAR temp =
			        IF ( ISFILTERED ( DimSHIMeasures[Metric ] ), COUNTROWS ( DimSHIMeasures ), 0 )
			RETURN
			    IF (
			        temp > 1,
			        "Multiple Metric Selected",
			        IF ( temp == 0, BLANK (), MAX ( DimSHIMeasures[Metric ] ) ) 
			    )
			```
		displayFolder: SHI Measures V2
		lineageTag: 1a869f07-fb0d-4a30-b948-51929f21d80b

	measure Month =
			
			VAR MonthCount =
			        DISTINCTCOUNT ( CalendarDate[Month Desc] )
			RETURN
			    IF (
			        ISFILTERED ( CalendarDate ),
			        IF (
			            MonthCount = 1,
			            MAX ( CalendarDate[Month Desc] ),
			            "Multiple Months Selected"
			        ),
			        BLANK ()
			    )
		displayFolder: SHI Measures V2
		lineageTag: 1dabae7f-caeb-456b-9138-cbf31f1eed21

	measure Satisfactory = 30
		formatString: 0
		displayFolder: SHI Measures V2
		lineageTag: 7b1940f6-8405-4134-a703-3b49b640a2c7

	measure '% Change' = DIVIDE([Ticket Count], [Prior Month Ticket], blank())-1
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 363db90b-c2d5-4c2c-8bc7-f10c6ec8bb60

	measure 'Prior Month Ticket' = CALCULATE([Ticket Count], PREVIOUSMONTH(CalendarDate[Date]))
		formatString: 0
		lineageTag: 90d1d1bd-df45-47ce-ae71-d384301a467b

	measure 'Ticket Volume Created Ticket Count' = ```
			
			VAR MaxMonth = 
			    MAX ( CalendarDate[month] )
			VAR IsMonthFiltered = 
			    ISFILTERED ( CalendarDate[Date] )
			VAR TicketCountDefault =
			    IF (
			        IsMonthFiltered,
			        CALCULATE (
			            [Ticket Count],
			            FILTER (CalendarDate,CalendarDate[month] = MaxMonth )
			        ),
			        [Ticket Count]
			    )
			RETURN TicketCountDefault
			
			```
		formatString: #,0
		lineageTag: 5e90fdec-8f2c-4d9e-bb2e-eddd4b966b1e

	measure 'Sum of Prior Month Ticket' =
			CALCULATE(
			    COUNT(FactTicket[ticket_id]),
			    DATESINPERIOD(
			        CalendarDate[Date],
			        DATEADD(LASTDATE(CalendarDate[date]), -1, MONTH),
			        -1,
			        MONTH
			    )
			)
		formatString: #,0
		lineageTag: b0a95e9e-ded3-4c1e-830b-bf9cda397979

	measure 'Ticket Volume By Product' =
			
			IF(ISFILTERED(DimProduct[Product Pillar]),SELECTEDVALUE(DimProduct[Product Pillar]),"No Product Selected")
		lineageTag: baa2f767-8958-48cf-8547-5afd1eaab385

	measure '% of Total Ticket Volume' = ```
			
			
			VAR FilteredTicket = CALCULATE([Ticket Count])
			
			VAR TicketTotal = CALCULATE([Ticket Count],REMOVEFILTERS(DimProduct[Product Pillar]))
			
			VAR Percentage = CALCULATE(FilteredTicket/TicketTotal)
			        
			RETURN Percentage
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 88bc1617-b06b-435c-a464-2faf7ab1b8b1

	measure 'Ticket Volume Conditional Formatting' = ```
			
			 Var TicketCount = [Created Ticket Count]
			 Var SD = [Prior Month Ticket]
			 RETURN
			 SWITCH(TRUE(),
			 [Created Ticket Count]>[Prior Month Ticket],"#D95760","#33CCA5")
			 
			```
		lineageTag: fbe1847c-2535-427f-937c-f84b2b0a41b4

	measure 'Month 1' = ```
			
			VAR MinDate = MIN(CalendarDate[Date])
			VAR MaxDate = MAX(CalendarDate[Date])
			RETURN "Months Falling Under Month 1: " & CONCATENATEX(
			        DISTINCT(
			            SELECTCOLUMNS(FILTER(
			                'CalendarDate',
			                ('CalendarDate'[Date]>=MinDate && 'CalendarDate'[Date]<=MaxDate) &&
			                CalendarDate[Quarter Ticket Volume] = "Month 1"
			            ), [Month Short Name])
			        ),
			        CalendarDate[Month Short Name], 
			        ", "
			    )
			```
		lineageTag: 8e54e281-630b-471a-a205-7d4ec0474c00

	measure 'Month 2' = ```
			
			VAR MinDate = MIN(CalendarDate[Date])
			VAR MaxDate = MAX(CalendarDate[Date])
			RETURN "Months Falling Under Month 2: " & CONCATENATEX(
			        DISTINCT(
			            SELECTCOLUMNS(FILTER(
			                'CalendarDate',
			                ('CalendarDate'[Date]>=MinDate && 'CalendarDate'[Date]<=MaxDate) &&
			                CalendarDate[Quarter Ticket Volume] = "Month 2"
			            ), [Month Short Name])
			        ),
			        CalendarDate[Month Short Name], 
			        ", "
			    )
			```
		lineageTag: 45db3338-91e1-4dec-af25-e30a6dc66e63

	measure 'Month 3' = ```
			
			VAR MinDate = MIN(CalendarDate[Date])
			VAR MaxDate = MAX(CalendarDate[Date])
			RETURN "Months Falling Under Month 3: " & CONCATENATEX(
			        DISTINCT(
			            SELECTCOLUMNS(FILTER(
			                'CalendarDate',
			                ('CalendarDate'[Date]>=MinDate && 'CalendarDate'[Date]<=MaxDate) &&
			                CalendarDate[Quarter Ticket Volume] = "Month 3"
			            ), [Month Short Name])
			        ),
			        CalendarDate[Month Short Name], 
			        ", "
			    )
			```
		lineageTag: 59e41853-99a9-446e-93a8-563432aee87c

	measure 'Var to Required Capacity (Old)' = ```
			
			IF (
			    NOT ( ISINSCOPE ( FactTicket[Created Date] ) ),
			    DIVIDE ( ( [Ramped Capacity] - [Headcount Required] ), [Headcount Required] )
			)
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Headcount Measures
		lineageTag: c4499eac-2cae-45ed-9cd2-f80776924d53

	measure 'Ramped Capacity (Old)' =
			
			CALCULATE (
			    SUM ( WorkdayHeadcounSummary[Ramped_Capacity]),
			    WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE"
			)
		formatString: #,0.00
		displayFolder: Headcount Measures
		lineageTag: 31b090b7-5bc5-450a-841d-d80e57bfa3d4

	measure 'HC to Support Forecast (Old)' =
			
			CALCULATE (
			    SUM ( FactFCPMonthlyTeamMetrics[Headcount Forecasted] ),
			    WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE"
			)
		displayFolder: Headcount Measures
		lineageTag: 3815a90a-bf12-4ed4-9c1b-8301acb2fa04

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Tickets Forecasted' = ```
			
			    SUM ( FactFCPMonthlyTeamForecast[Tickets Forecasted] )
			```
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 8860082e-2ce9-47d6-8420-ffc9b9b9ebe2

	measure 'Testing Comment Count' =
			
			CALCULATE (
			    COUNT ( FactTicketComment[comment_id] ),
			    // DimTicketComment[Author Role] <> "end-user",
			    USERELATIONSHIP ( FactTicketComment[Ticket Comment Date], CalendarDate[Date] ),
			    USERELATIONSHIP ( DimTicket[Ticket ID], FactTicketComment[ticket_id]),
			    USERELATIONSHIP ( DimAssignee[Zendesk User ID], FactTicketComment[author_zendesk_id] )
			)
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 7e8ae244-636b-48f5-b8f0-6e9f038da4b0

	measure 'BG Color Premium Financials' = IF ( MAX ( RLSTable[is_support_lt] ) = 1, "#FFFFFF00", "#F6F8FA" )
		displayFolder: RLS Measures Testing
		lineageTag: f69627a8-6eec-47ba-a280-cd0b89345416

	measure 'Text Color Premium Financials' = IF ( [Is Support LT], "#FFFFFF00", "#202C36" )
		displayFolder: RLS Measures Testing
		lineageTag: ccdd81a4-1fe5-4926-aa1d-bb963d67ac1a

	measure 'Ticket Volume From Target Formatting' = IF([Ticket Volume Created Ticket Count] > [Sum of Prior Month Ticket], "#D95760", "#808080")
		lineageTag: ae057bba-7d70-4007-a4d0-4af54aac82ff

	measure 'Number of Tickets with GH Incident' =
			
			CALCULATE ( [Ticket Count], NOT ( ISBLANK( DimTicket[Is Incident] ) ) )
		formatString: 0
		displayFolder: Count Measures
		lineageTag: 8626ec45-e53c-4e46-821a-34907c13380e

	measure 'Number of Tickets  with No Incident' =
			
			CALCULATE ( [Ticket Count], ISBLANK ( DimTicket[Is Incident] ) )
		formatString: 0
		displayFolder: Count Measures
		lineageTag: 1b425192-6258-48b7-85e0-2c3cadce3638

	measure 'Last Refreshed Date' =
			
			"Last Refreshed Date and Time: " & CALCULATE ( MAX ( DimFCPProduct[Last Refresh At] ), ALL ( DimFCPProduct ) )
		lineageTag: 46021cc2-c5c2-4ae6-9eff-f258a6bcf29a

	measure 'Headcount Forecasted' =
			
			IF(MAX(CalendarDate[Year Month]) > 202408,
			    IF(MAX(DimTeam[Team]) IN {"Enterprise", "Premium Standard"},
			        CALCULATE( SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted]), ALL(DimTeam), DimTeam[Team] = "Enterprise") + CALCULATE(SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted]), ALL(DimTeam), DimTeam[Team] = "Premium Standard"),
			       SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted])
			    ),
			SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted])
			)
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: f5e01c7e-a796-49c9-a351-ae12496f4d30

	measure 'Headcount Required' = ```
			
			VAR Denominator =
			    DIVIDE (
			        IF (
			            MAX ( CalendarDate[Year Month] ) > 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    [Tickets Forecasted],
			                    ALL ( DimTeam ),
			                    DimTeam[Team] = "Enterprise"
			                )
			                    + CALCULATE (
			                        [Tickets Forecasted],
			                        ALL ( DimTeam ),
			                        DimTeam[Team] = "Premium Standard"
			                    ),
			                [Tickets Forecasted]
			            ),
			            [Tickets Forecasted]
			        ),
			        [Headcount Forecasted]
			    )
			RETURN
			    DIVIDE (
			        IF (
			            MAX ( CalendarDate[Year Month] ) > 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    [Created Ticket Count],
			                    ALL ( DimTeam ),
			                    DimTeam[Team] = "Enterprise"
			                )
			                    + CALCULATE (
			                        [Created Ticket Count],
			                        ALL ( DimTeam ),
			                        DimTeam[Team] = "Premium Standard"
			                    ),
			                [Created Ticket Count]
			            ),
			            [Created Ticket Count]
			        ),
			        Denominator,
			        0
			    )
			
			```
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 10b36004-27f5-4926-b5de-9b0a944f7f1d

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'One-touch tickets' = ```
			
			VAR TicketsResolvedSameMonth =
			CALCULATE( 
			        DISTINCTCOUNT(FactTicketComment[ticket_id]),
			        DimTicketComment[Is Automated Comment] = False ,
			        DimTicketComment[Is Public Comment] = True,
			        USERELATIONSHIP(FactTicket[Solved Date],CalendarDate[Date]),
			        USERELATIONSHIP(FactTicketComment[author_zendesk_id],DimAssignee[Zendesk User ID])
			    )
			
			
			VAR TotalTicketsWith1Comments = 
			    CALCULATE(
			        DISTINCTCOUNT(FactTicketComment[ticket_id]),
			        FactTicketComment[Public Comments]=1,
			        DimTicketComment[Is Automated Comment] = False ,
			        DimTicketComment[Is Public Comment] = True,
			        USERELATIONSHIP(FactTicket[Solved Date],CalendarDate[Date]),
			        USERELATIONSHIP(FactTicketComment[author_zendesk_id],DimAssignee[Zendesk User ID])
			    )
			
			RETURN
			    DIVIDE(TotalTicketsWith1Comments, TicketsResolvedSameMonth, 0)
			```
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Average Measures
		lineageTag: eb82d12e-8516-4bb3-9efa-7ee85481f943

	measure 'Two-touch tickets' = ```
			
			VAR TicketsResolvedSameMonth = 
			    CALCULATE( 
			        DISTINCTCOUNT(FactTicketComment[ticket_id]),
			        DimTicketComment[Is Automated Comment] = False ,
			        DimTicketComment[Is Public Comment] = True,
			        USERELATIONSHIP(FactTicket[Solved Date],CalendarDate[Date]),
			        USERELATIONSHIP(FactTicketComment[author_zendesk_id],DimAssignee[Zendesk User ID])
			    )
			
			VAR TotalTicketsWith2Comments = 
			    CALCULATE(
			        DISTINCTCOUNT(FactTicketComment[ticket_id]),
			        FactTicketComment[Public Comments]=2,
			        DimTicketComment[Is Automated Comment] = False ,
			        DimTicketComment[Is Public Comment] = True,
			        USERELATIONSHIP(FactTicket[Solved Date],CalendarDate[Date]),
			        USERELATIONSHIP(FactTicketComment[author_zendesk_id],DimAssignee[Zendesk User ID])
			    )
			
			RETURN
			    DIVIDE(TotalTicketsWith2Comments, TicketsResolvedSameMonth, 0)
			```
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Average Measures
		lineageTag: e866bc8b-48d6-4bcc-a30f-2385dfac35af

	measure 'One-Touch Tickets (RLS)' = CALCULATE([One-touch tickets], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: RLS Measures Testing
		lineageTag: 11ca61cd-3a8b-4be2-8445-e2f56bc1fe3b

	measure 'Two-Touch Tickets (RLS)' = CALCULATE([Two-touch tickets], TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle]))
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: RLS Measures Testing
		lineageTag: dc24ed65-5c94-4cbd-9cfb-770d845abc2f

	measure 'Forecasted Capacity Gap' =
			
			VAR RampedCapacity = [Ramped Capacity]
			RETURN IF(NOT(ISBLANK(RampedCapacity)), RampedCapacity - [Headcount Forecasted])
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 804dc042-2e89-4769-b897-1a27714bdab9

	measure 'Headcount Forecast Variance with Ramped Capacity' = ```
			
			 DIVIDE((([Ramped Capacity]- [Headcount Forecasted])*100),
			 [Ramped Capacity]
			 )/100
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Headcount Measures
		lineageTag: 72787dff-0d85-4fd4-b81e-8a39e833d3c7

	measure 'Headcount Forecast Variance with Required Headcount' =
			
			DIVIDE(([Headcount Required] - [HC to Support Forecast]) *100 , [Headcount Required])/100
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Headcount Measures
		lineageTag: f00da317-7380-4c4e-9a88-a15b72c9c57e

	measure 'Target Capacity Gap' =
			
			VAR RampedCapacity = [Ramped Capacity]
			RETURN IF(NOT(ISBLANK(RampedCapacity)), SUM(FactFCPMonthlyTeamMetrics[Target Capacity Gap]))
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: d46147fe-18ff-4f15-8b70-ff89f3bc824f

	measure 'Capacity Utilization Rate' =
			
			VAR HeadcountRequired = IF(MAX(DimTeam[Team]) = "Premium Plus", [Headcount Required (Premium Plus)], [Headcount Required])
			RETURN DIVIDE ( HeadcountRequired, [Ramped Capacity] )
		displayFolder: Headcount Measures
		lineageTag: 74ba98bd-621c-48d6-b941-1b62cb2fcbe7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Overall Ticket Rate' = (SUM ( FactTicketRateOverall[Ticket Rate] ) * 1000)/100
		formatString: #,0.00%;-#,0.00%;#,0.00%
		displayFolder: Ticket Rate
		lineageTag: f713fd7c-76f7-4682-8b7c-db9d450ea956

	measure 'Ticket Rate (Team)' = (SUM ( FactTicketRateTeam[Ticket Rate] ) * 1000) /100
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Ticket Rate
		lineageTag: 163af4d2-9d73-4541-896e-4f638434aae8

	measure 'Looking Back Text' = "Looking Back: " & FORMAT ( EOMONTH ( TODAY (), -1 ), "MMM YYYY" )
		displayFolder: Forecasting Measures V3
		lineageTag: 170ba2de-83ba-404b-bce0-8f00bd088505

	measure 'Looking Ahead Text' = "Looking Ahead: " & FORMAT ( EOMONTH ( TODAY (), 0 ), "MMM YYYY" )
		displayFolder: Forecasting Measures V3
		lineageTag: 4f4085ab-f345-4834-912a-451db9af0bbe

	measure 'XR Capacity' = SUM ( FactCapacityForecastOutput[Headcount Forecasted  - XR] )
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 0df07f3c-d6e9-44d7-bf03-2fdc5893a692

	measure 'XR Solved Tickets' = CALCULATE([Solved Ticket Count], DimManager[Manager Handle] = "ooolaniyi")
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: 6c760724-0923-4041-8b89-de544df59998

	measure 'New Hires' = SUM ( WorkdayHeadcounSummary[New_Hire] )
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 08f22b20-24bf-407b-97b9-3f772f9f4b8a

	measure 'Created Tickets MoM%' = ```
			
			VAR CurrentM =
			    CALCULATE (
			        [Created Ticket Count],
			        CalendarDate[Month Ending Date] = EOMONTH ( TODAY (), -1 )
			    )
			VAR PreviousM =
			    CALCULATE (
			        [Created Ticket Count],
			        CalendarDate[Month Ending Date] = EOMONTH ( TODAY (), -2 )
			    )
			RETURN
			    DIVIDE ( CurrentM - PreviousM, PreviousM, 0 )
			
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Forecasting Measures V3
		lineageTag: 42cc6e15-7147-4516-9cec-93a646bd4533

	measure 'Created Tickets YoY%' =
			
			VAR CurrentYear = CALCULATE ( MAX ( CalendarDate[Fiscal Year] ), CalendarDate[Date] <= EOMONTH( TODAY(), -1 ) )
			VAR CurrentY =
			    CALCULATE (
			        [Created Ticket Count],
			        CalendarDate[Fiscal Year] = CurrentYear
			    )
			VAR PreviousY =
			    CALCULATE (
			        [Created Ticket Count],
			        CalendarDate[Fiscal Year] = CurrentYear - 1
			    )
			RETURN
			    DIVIDE ( CurrentY - PreviousY, PreviousY, 0 )
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Forecasting Measures V3
		lineageTag: 6e1e9bca-527f-4442-896b-736263b5a25d

	measure 'Solved Tickets MoM%' = ```
			
			VAR CurrentM =
			    CALCULATE (
			        [Solved Ticket Count],
			        CalendarDate[Month Ending Date] = EOMONTH ( TODAY (), -1 )
			    )
			VAR PreviousM =
			    CALCULATE (
			        [Solved Ticket Count],
			        CalendarDate[Month Ending Date] = EOMONTH ( TODAY (), -2 )
			    )
			RETURN
			    DIVIDE ( CurrentM - PreviousM, PreviousM, 0 )
			
			```
		formatString: 0%;-0%;0%
		displayFolder: Forecasting Measures V3
		lineageTag: 2ab2bd1f-1313-4e0d-b36a-54b47abf20f6

	measure 'Solved Tickets YoY%' =
			
			VAR CurrentYear = MAX ( CalendarDate[Fiscal Year] )
			VAR CurrentY =
			    CALCULATE (
			        [Solved Ticket Count],
			        CalendarDate[Fiscal Year] = CurrentYear
			    )
			VAR PreviousY =
			    CALCULATE (
			        [Solved Ticket Count],
			        CalendarDate[Fiscal Year] = CurrentYear - 1
			    )
			RETURN
			    DIVIDE ( CurrentY - PreviousY, PreviousY, 0 )
		formatString: 0%;-0%;0%
		displayFolder: Forecasting Measures V3
		lineageTag: 541696f0-e38d-48db-89d9-6b04bdf79a9e

	measure 'Created Tickets MTD' = CALCULATE ( [Created Ticket Count], DATESMTD ( CalendarDate[Date] ) )
		formatString: 0
		displayFolder: Count Measures
		lineageTag: 0a43ba38-275a-41a3-82a0-29aa681b408a

	measure 'Ticket Run Rate' = ```
			( [Created Ticket Count] / DAY ( TODAY() ) ) * DAY ( EOMONTH ( TODAY(), 0 ) )
			
			```
		formatString: #,0
		displayFolder: Forecasting Measures V3
		lineageTag: e9320c76-149b-4ca5-8534-611123919581

	measure 'Projected Variance %' = ```
			
			VAR Forecasted = [Tickets Forecasted]
			RETURN DIVIDE ( [Ticket Run Rate] - Forecasted, Forecasted ) 
			```
		formatString: #,0%;-#,0%;#,0%
		displayFolder: Forecasting Measures V3
		lineageTag: 7eede09e-d31a-4be1-97ea-73b4b53e2521

	measure 'Headcount Forecasted - FTE' = SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted - FTE])
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: de7a8d10-94b9-41e9-9b2d-119a6e9d20e8

	measure 'Forecasted Capacity Gap (Team)' = ```
			
			VAR RampedCapacityAll = [Ramped Capacity]
			VAR RampedCapacityFTE = [Ramped Capacity - FTE]
			VAR RampedCapacityXR = [Ramped Capacity - XR]
			VAR ForecastedHeadcountAll =
			    IF (
			        NOT ( ISBLANK ( RampedCapacityAll ) ),
			        RampedCapacityAll - [Headcount Forecasted]
			    )
			VAR ForecastedHeadcountFTE =
			    IF (
			        NOT ( ISBLANK ( RampedCapacityFTE ) ),
			        RampedCapacityFTE - [Headcount Forecasted - FTE]
			    )
			VAR ForecastedHeadcountXR =
			    IF (
			        NOT ( ISBLANK ( RampedCapacityXR ) ),
			        RampedCapacityXR - [Headcount Forecasted - XR]
			    )
			VAR HeadcountType =
			    SELECTEDVALUE ( 'Headcount XR - FTE Breakdown Slicer'[Value4] )
			RETURN
			    SWITCH (
			        TRUE (),
			        HeadcountType = "Select All", ForecastedHeadcountAll,
			        HeadcountType = "Headcount Forecasted - FTE", ForecastedHeadcountFTE,
			        HeadcountType = "Headcount Forecasted - XR", ForecastedHeadcountXR
			    )
			
			```
		formatString: #,0
		displayFolder: Headcount Measures
		lineageTag: 7ab6a5ed-15a2-496a-ad63-92d338a615ac

	measure 'Change in Tickets MoM%' = ```
			
			VAR MonthofYear = SELECTEDVALUE(CalendarDate[Month of Year])
			VAR FiscalMonth = CALCULATE( MAX(CalendarDate[Fiscal Month of Year]), CalendarDate[Month of Year] = MonthofYear )
			//VAR metric = if(SELECTEDVALUE('Support Impact Category Heatmap'[Support Impact Category Heatmap Order])==0, [Time to Resolve P75 Calendar Hours],[Ticket Count])
			// VAR PreviousMonthofYear = IF(FiscalMonth = 1, 12, MonthofYear - 1 )
			VAR FiscalYear = SELECTEDVALUE(CalendarDate[Fiscal Year])
			VAR CurrentM =
			    CALCULATE (
			        if(SELECTEDVALUE('Support Impact Category Heatmap'[Support Impact Category Heatmap Order])==0, [Time to Resolve P75 Calendar Hours],[Ticket Count]),
			        ALL(CalendarDate), CalendarDate[Fiscal Month of Year] = FiscalMonth && CalendarDate[Fiscal Year] = FiscalYear
			    )
			VAR PreviousM =
			    CALCULATE (
			        if(SELECTEDVALUE('Support Impact Category Heatmap'[Support Impact Category Heatmap Order])==0, [Time to Resolve P75 Calendar Hours],[Ticket Count]),
			        ALL(CalendarDate), CalendarDate[Fiscal Month of Year] = FiscalMonth - 1 && CalendarDate[Fiscal Year] = FiscalYear 
			    )
			RETURN 
			// PreviousM
			//CurrentM
			    IF(MonthofYear = 7, 0, DIVIDE ( CurrentM - PreviousM, PreviousM, 0 ))
			
			```
		formatString: 0%;-0%;0%
		displayFolder: Forecasting Measures V3
		lineageTag: 7faa08aa-2d6e-4eea-92b5-69b8d8fa1d0c

	measure 'Change in Tickets YoY%' =
			
			VAR FiscalYear = SELECTEDVALUE(CalendarDate[Fiscal Year])
			VAR CurrentY =
			    CALCULATE (
			        [Created Ticket Count],
			        ALL(CalendarDate), CalendarDate[Fiscal Year] = FiscalYear
			    )
			VAR PreviousY =
			    CALCULATE (
			        [Created Ticket Count],
			        ALL(CalendarDate), CalendarDate[Fiscal Year] = FiscalYear - 1
			    )
			RETURN
			    DIVIDE ( CurrentY - PreviousY, PreviousY, 0 )
		formatString: 0%;-0%;0%
		displayFolder: Forecasting Measures V3
		lineageTag: f9f19030-ed1e-4b5e-af5e-dc839e391ab2

	measure 'Headcount Forecasted - XR' = SUM(FactFCPMonthlyTeamMetrics[Headcount Forecasted  - XR])
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 7fddec02-7c77-4ad8-b225-9bafc6f849c8

	measure 'Ramped Capacity - FTE' = ```
			
			 VAR CurrentYearMonth =
			    CALCULATE (
			        MAX ( CalendarDate[Year Month] ),
			        ALL ( CalendarDate ),
			        CalendarDate[Date] = EOMONTH ( TODAY (), 0 )
			    )
			VAR CurrentRampedCapacity =
			    CALCULATE (
			        [Ramped Capacity - FTE Updated],
			        ALL ( CalendarDate ),
			        CalendarDate[Year Month] = CurrentYearMonth
			    )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) > CurrentYearMonth,
			        CurrentRampedCapacity,
			        [Ramped Capacity - FTE Updated]
			    )
			```
		displayFolder: Headcount Measures
		lineageTag: 9dbcaca2-93af-4283-bd6d-98b9f96b0498

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped Capacity - XR' = ```
			
			 VAR CurrentYearMonth =
			    CALCULATE (
			        MAX ( CalendarDate[Year Month] ),
			        ALL ( CalendarDate ),
			        CalendarDate[Date] = EOMONTH ( TODAY (), 0 )
			    )
			VAR CurrentRampedCapacity =
			    CALCULATE (
			        [Ramped Capacity - XR Updated],
			        ALL ( CalendarDate ),
			        CalendarDate[Year Month] = CurrentYearMonth
			    )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) > CurrentYearMonth,
			        CurrentRampedCapacity,
			        [Ramped Capacity - XR Updated]
			    )
			```
		displayFolder: Headcount Measures
		lineageTag: 41b49aeb-66a2-4577-9f24-25ef9b08b175

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped Capacity(Team)' = ```
			
			VAR HeadcountType =
			    SELECTEDVALUE ( 'Headcount XR - FTE Breakdown Slicer'[Value4] )
			RETURN
			    SWITCH (
			        TRUE (),
			        HeadcountType = "Select All", [Ramped Capacity],
			        HeadcountType = "Headcount Forecasted - FTE", [Ramped Capacity - FTE],
			        HeadcountType = "Headcount Forecasted - XR", [Ramped Capacity - XR]
			    )
			
			```
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 82e6c7f0-4ec1-4b78-ac39-6687f49672c0

	measure 'Is Support LT' = IF( CALCULATE ( MAX ( RLSTable[is_support_lt] ) = 1, ALL ( RLSTable ) ), TRUE(), FALSE() )
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 63c73675-14f5-465e-9b9c-19453d980a12

	measure 'Is Forecast Owner' = IF( CALCULATE ( MAX ( RLSTable[is_forecast_owner] ) = 1, ALL ( RLSTable ) ), TRUE(), FALSE() )
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 36fe6d21-5066-4b67-91b9-d5a3c6be5aac

	measure 'Text Color Forecasting' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#FFFFFF00", "#202C36" )
		displayFolder: Forecasting Measures V3
		lineageTag: 0dc61095-4089-4a22-84f9-704b6e87bdf7

	measure 'BG Color for Forecasting' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#FFFFFF00", "#F6F8FA" )
		displayFolder: Forecasting Measures V3
		lineageTag: dfd57878-5495-4e4f-b6b3-ca0fbf6d1abe

	measure 'Enteprise Navigation' = IF( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Enterprise")
		displayFolder: Forecasting Measures V3
		lineageTag: 74b7df44-940d-47f5-a118-48c5478d9398

	measure 'Premium Plus Navigation' = IF( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Premium Plus")
		displayFolder: Forecasting Measures V3
		lineageTag: 3cb4364d-6f22-4d70-9f86-b2355c140365

	measure 'Security and Revenue Navigation' = IF( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Security & Revenue Support")
		displayFolder: Forecasting Measures V3
		lineageTag: c1f746c3-cfb7-443e-af48-a861e8307ea3

	measure 'Technical Navigation' = IF( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Technical")
		displayFolder: Forecasting Measures V3
		lineageTag: c1a438db-4e2f-43aa-b7b1-bfe7bdc3e96f

	measure 'Button Color' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#808080", "#FFFFFF00" )
		displayFolder: Forecasting Measures V3
		lineageTag: 72548745-5dcb-44a7-80b2-1e71a9b6176f

	measure 'Button Color on Hover or Click' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#FFFFFF", "#FFFFFF00")
		displayFolder: Forecasting Measures V3
		lineageTag: de39cc02-9935-43d8-a5c4-d5757c24b98c

	measure 'Button Font Color' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#FFFFFF", "#FFFFFF00" )
		displayFolder: Forecasting Measures V3
		lineageTag: 49fdfc1c-bc13-4d16-b6e6-405509a38c66

	measure 'Button Font Color on Click or Hover' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#202C36", "#FFFFFF00" )
		displayFolder: Forecasting Measures V3
		lineageTag: be4f2308-b429-40cf-bef0-c242bf5ab9de

	measure 'Support Impact Summary Navigation' = IF( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Support Impact Summary")
		displayFolder: Forecasting Measures V3
		lineageTag: 3ebe31ba-ed9f-4aaa-86f0-6679aa25a4a3

	measure 'BG Color for Last Refreshed' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#FFFFFF00", "#24292F" )
		displayFolder: Forecasting Measures V3
		lineageTag: a059629d-1c11-43dc-8ddf-1c6950bd3020

	measure 'Is Support Manager' = IF( CALCULATE ( MAX ( RLSTable[is_support_manager] ) = 1, ALL ( RLSTable ) ), TRUE(), FALSE() )
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: ecdeb7fe-bf8b-4f45-bf61-53f29817711e

	measure 'Support Impact Button Color' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "#24292F", "#FFFFFF00" )
		displayFolder: Forecasting Measures V3
		lineageTag: cef3d8ae-02c6-4c2f-9fc2-29d16113e470

	measure 'FTE Solved Tickets' = [Solved Ticket Count] - [XR Solved Tickets]
		formatString: 0
		displayFolder: Count Measures
		lineageTag: 494bb2a4-db68-42e4-b427-002b1d53a17b

	measure 'Actual Capacity Gap' =
			
			VAR RampedCapacity = [Ramped Capacity]
			VAR HeadcountRequired = IF(MAX(DimTeam[Team]) = "Premium Plus", [Headcount Required (Premium Plus)], [Headcount Required])
			RETURN IF(NOT(ISBLANK(RampedCapacity)), RampedCapacity - HeadcountRequired)
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 68f7b105-6b9b-48c0-a2cb-3c6df80d59ab

	measure 'Capacity Gap (Region)' =
			[Ramped Capacity] -[Headcount Required Region]
			// This metric is using the region output for tickets
		formatString: 0
		displayFolder: Forecasting Measures V3
		lineageTag: c2021275-0aac-4da7-9f2b-ebd22dd27ed1

	measure 'Headcount Required (Premium Plus)' = ```
			
			VAR CurrentMonthDate = MAX(CalendarDate[Date])
			VAR PreviousMonthDate = EOMONTH(CurrentMonthDate, -1)
			VAR TotalAssigned = 
			    CALCULATE(
			        MAX(FactPremiumPlusCapacity[Total Assigned CRE Account Complexity]),
			        FactPremiumPlusCapacity[Snapshot Date] = CurrentMonthDate
			    )
			VAR AverageComplexity = 
			    CALCULATE(
			        MAX(FactPremiumPlusCapacity[Average CRE Complexity]),
			        FactPremiumPlusCapacity[Snapshot Date] = PreviousMonthDate
			    )
			VAR TargetComplexity = 
			    CALCULATE(
			        MAX(FactPremiumPlusCapacity[Target CRE Complexity]),
			        FactPremiumPlusCapacity[Snapshot Date] = PreviousMonthDate
			    )
			RETURN 
			    IF(MAX(CalendarDate[Year Month]) > 202410, DIVIDE(TotalAssigned, (AverageComplexity + TargetComplexity) / 2), [Headcount Required])
			    
			```
		displayFolder: Forecasting Measures V3
		lineageTag: 24c7c2bf-6777-4cc1-992e-77ea0b259300

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Total Backlog All Status (RLS)' = ```
			
			CALCULATE(  
			    [Total Backlog All Status],  
			    TREATAS(VALUES(RLSTable[ic_handle]), DimAssignee[Assignee Handle])  
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 0fbd7d62-3438-4eac-859e-f9fc9e5ce915

	measure 'Backlog Last Day Month All Status (RLS)' = ```
			
			CALCULATE (  
			    [Total Backlog All Status (RLS)],  
			    ENDOFMONTH ( CalendarDate[Date] )  
			)
			
			```
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 9993cdb4-c21a-4a3d-8871-d28cfda32b0a

	measure 'Ticket Rate (Offering)' = (SUM ( FactTicketRateOffering[Ticket Rate]) *1000)/100
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Ticket Rate
		lineageTag: 9a96028b-9e4e-43d6-94fe-11d9d35377cd

	measure 'Measure 2'
		displayFolder: Forecasting Measures V3
		lineageTag: 823bdc65-ad69-4554-aa60-c8e0999771e1

		annotation 43dbc3e8-3a1c-4b6f-9923-b49ff7d6691c = True

	measure 'Measure 3'
		displayFolder: Forecasting Measures V3
		lineageTag: e4919df9-88ab-4ae0-aa5d-f2aa35830e90

		annotation 43dbc3e8-3a1c-4b6f-9923-b49ff7d6691c = True

	measure 'Change in Tickets' = ```
			
			VAR MonthofYear = SELECTEDVALUE(CalendarDate[Month of Year])
			VAR FiscalMonth = CALCULATE( MAX(CalendarDate[Fiscal Month of Year]), CalendarDate[Month of Year] = MonthofYear )
			// VAR PreviousMonthofYear = IF(FiscalMonth = 1, 12, MonthofYear - 1 )
			VAR FiscalYear = SELECTEDVALUE(CalendarDate[Fiscal Year])
			VAR CurrentM =
			    CALCULATE (
			        [Created Ticket Count],
			        ALL(CalendarDate), CalendarDate[Fiscal Month of Year] = FiscalMonth && CalendarDate[Fiscal Year] = FiscalYear
			    )
			VAR PreviousM =
			    CALCULATE (
			        [Created Ticket Count],
			        ALL(CalendarDate), CalendarDate[Fiscal Month of Year] = FiscalMonth - 1 && CalendarDate[Fiscal Year] = FiscalYear 
			    )
			RETURN 
			// PreviousM
			    IF(MonthofYear = 7, 0,  CurrentM - PreviousM)
			
			```
		formatString: 0
		displayFolder: Forecasting Measures V3
		lineageTag: b0ae5255-597e-4050-a35d-8d2bf7c36500

	measure 'Measure 4' =
			
			VAR metric = if(SELECTEDVALUE('Support Impact Category Heatmap'[Support Impact Category Heatmap Order])==0, [Time to Resolve P75 Calendar Hours],[Ticket Count])
			return metric
		displayFolder: Forecasting Measures V3
		lineageTag: 280bf0b5-78ce-4edb-b491-64ceb761ebbd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Support Overview Nav' = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager], "Support Overview")
		displayFolder: Forecasting Measures V3
		lineageTag: f5baf584-3eaa-4358-8412-2ab2f71cfd52

	measure 'Headcount Forecasted Region' = ```
			
			IF(MAX(CalendarDate[Year Month]) > 202408,
			    IF(MAX(DimTeam[Team]) IN {"Enterprise", "Premium Standard"},
			        CALCULATE( 
			            SUM(FactCapacityForecastTeamRegionOutput[Headcount Forecasted - Overall - Region]), ALL(DimTeam), DimTeam[Team] = "Enterprise"
			            ) 
			            +
			            CALCULATE(
			                SUM(FactCapacityForecastTeamRegionOutput[Headcount Forecasted - Overall - Region]), ALL(DimTeam), DimTeam[Team] = "Premium Standard"
			            ),
			       SUM(FactCapacityForecastTeamRegionOutput[Headcount Forecasted - Overall - Region])
			    ),
			SUM(FactCapacityForecastTeamRegionOutput[Headcount Forecasted - Overall - Region]
			))
			```
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 41759196-c454-47e5-9e91-3e48e724c776

	measure 'Headcount Required Region' = ```
			
			VAR Denominator =
			    DIVIDE (
			        IF (
			            MAX ( CalendarDate[Year Month] ) > 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    [Tickets Forecasted],
			                    ALL ( DimTeam ),
			                    DimTeam[Team] = "Enterprise"
			                )
			                    + CALCULATE (
			                        [Tickets Forecasted],
			                        ALL ( DimTeam ),
			                        DimTeam[Team] = "Premium Standard"
			                    ),
			                [Tickets Forecasted]
			            ),
			            [Tickets Forecasted]
			        ),
			       [Headcount Forecasted Region]
			    )
			RETURN
			    DIVIDE (
			        IF (
			            MAX ( CalendarDate[Year Month] ) > 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    [Created Ticket Count],
			                    ALL ( DimTeam ),
			                    DimTeam[Team] = "Enterprise"
			                )
			                    + CALCULATE (
			                        [Created Ticket Count],
			                        ALL ( DimTeam ),
			                        DimTeam[Team] = "Premium Standard"
			                    ),
			                [Created Ticket Count]
			            ),
			            [Created Ticket Count]
			        ),
			        Denominator,
			        0
			    )
			
			```
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 832c51e3-f453-405d-ac1b-61811f69f461

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'RLS Card Conditional colour (Actual Capacity Gap)' =
			
			var temp = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager] , [Actual Capacity Gap], 99999999 )
			return temp
		formatString: 0
		displayFolder: Forecasting Measures V3
		lineageTag: 8e27f499-3ed8-4ef6-969e-dfa90e5f4a2f

	measure 'RLS Card Conditional colour (Required Capacity)' =
			
			var temp = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager] , [Actual Capacity Gap], 99999999 )
			return temp
		displayFolder: Forecasting Measures V3
		lineageTag: d33dad61-5a48-48d1-b553-48ed8b07f99b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'RLS Hide/Show' =
			
			var temp = IF ( [Is Support LT] || [Is Forecast Owner] || [Is Support Manager] , 1, 0)
			return temp
		formatString: 0
		displayFolder: Forecasting Measures V3
		lineageTag: 4c4d56e0-0eb0-48ba-b259-421622a11435

	measure 'Ramped Capacity - FTE RLS' = ```
			
			VAR RampedCapacity =
			    CALCULATE (
			        SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			        WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE",
			        NOT CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" )
			    )
			RETURN
			    IF (
			        [RLS Hide/Show],
			        IF (
			            MAX ( CalendarDate[Year Month] ) >= 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			                    WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE",
			                    NOT CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" ),
			                    ALL ( DimTeam ),
			                    DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			                ),
			                RampedCapacity
			            ),
			            RampedCapacity
			        )
			    )
			
			```
		displayFolder: Headcount Measures
		lineageTag: b5bef04a-01e0-41cd-90a6-190cb4e67f01

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped Capacity - XR RLS' = ```
			
			VAR RampedCapacity =
			    CALCULATE (
			        SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			        CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" )
			    )
			RETURN
			    IF (
			        [RLS Hide/Show] == 1,
			        IF (
			            MAX ( CalendarDate[Year Month] ) >= 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                CALCULATE (
			                    SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			                    CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" ),
			                    ALL ( DimTeam ),
			                    DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			                ),
			                RampedCapacity
			            ),
			            RampedCapacity
			        )
			    )
			
			```
		displayFolder: Headcount Measures
		lineageTag: 539ca23f-cf47-4a9f-9973-6f2bd6b56365

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'FTE Solved Tickets RLS' = IF([RLS Hide/Show]==1,[Solved Ticket Count] - [XR Solved Tickets])
		formatString: 0
		displayFolder: Count Measures
		lineageTag: 12524b4e-c1d0-4195-b7b4-0c6d2d9451f5

	measure 'XR Solved Tickets RLS' = if([RLS Hide/Show]==1, CALCULATE([Solved Ticket Count], DimManager[Manager Handle] = "ooolaniyi"))
		formatString: #,0
		displayFolder: Count Measures
		lineageTag: fe7f98f5-b80b-4376-850d-9652265301ee

	measure 'XR Workload Efficiency' = [XR Solved Tickets RLS] / [Ramped Capacity - XR RLS]
		displayFolder: Forecasting Measures V3
		lineageTag: 92c0ffc1-cfff-4c78-8d17-2085a915d14a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'FTE Workload Efficiency' = [FTE Solved Tickets RLS] / [Ramped Capacity - FTE RLS]
		displayFolder: Forecasting Measures V3
		lineageTag: 7fdcb8fe-b789-4eb9-a6c3-c1d29104e5b7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped Capacity Updated' =
			
			VAR RampedCapacity =
			    ROUND ( [Ramped Capacity (Old)], 0 )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) >= 202408,
			        IF (
			            MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			            ROUND (
			                CALCULATE (
			                    [Ramped Capacity (Old)],
			                    ALL ( DimTeam ),
			                    DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			                ),
			                0
			            ),
			            RampedCapacity
			        ),
			        RampedCapacity
			    )
		formatString: 0
		displayFolder: Headcount Measures
		lineageTag: 7eb82f38-81ae-4d3f-a271-9713ab621b2f

	measure 'Projected Capacity Gap' = ```
			[Ramped Capacity] - ([Ticket Run Rate] / ([Tickets Forecasted] / [Headcount Forecasted]))
			 
			```
		displayFolder: Forecasting Measures V3
		lineageTag: ae36ba2b-ea6a-4f31-88cb-23e9c2a0147c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Capacity Utilization Rate(Team)' =
			
			// VAR HeadcountRequired = IF(MAX(DimTeam[Team]) = "Premium Plus", [Headcount Forecasted], [Headcount Forecasted])
			DIVIDE ( [Headcount Forecasted], [Ramped Capacity] )
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Headcount Measures
		lineageTag: 4c380276-b76f-4178-aef6-d3d18e773ba5

	measure 'Ramped Capacity - FTE Updated' = ```
			
			VAR RampedCapacity =
			    CALCULATE (
			        SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			        WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE",
			        NOT CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" )
			    )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) >= 202408,
			        IF (
			            MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			            CALCULATE (
			                SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			                WorkdayHeadcounSummary[Full Team] <> "Premium Plus - GHAE",
			                NOT CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" ),
			                ALL ( DimTeam ),
			                DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			            ),
			            RampedCapacity
			        ),
			        RampedCapacity
			    )
			
			```
		displayFolder: Headcount Measures
		lineageTag: 91efba86-a9a8-4879-93ae-e31cf6ac44bb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped Capacity - XR Updated' = ```
			
			VAR RampedCapacity =
			    CALCULATE (
			        SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			        CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" )
			    )
			RETURN
			    IF (
			        MAX ( CalendarDate[Year Month] ) >= 202408,
			        IF (
			            MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			            CALCULATE (
			                SUM ( WorkdayHeadcounSummary[Ramped_Capacity] ),
			                CONTAINSSTRING ( WorkdayHeadcounSummary[Full Team], "Contractors" ),
			                ALL ( DimTeam ),
			                DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			            ),
			            RampedCapacity
			        ),
			        RampedCapacity
			    )
			
			```
		displayFolder: Headcount Measures
		lineageTag: b5f64e5f-fa54-4b7e-abde-919cff8807d7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Ramped capacity new dummy' =
			
			VAR RampedCapacity =
			ROUND ( [Ramped Capacity (Old)], 0 )
			
			    VAR AdjustedCapacity =
			        IF (
			            MAX ( CalendarDate[Year Month] ) >= 202408,
			            IF (
			                MAX ( DimTeam[Team] ) IN { "Enterprise", "Premium Standard" },
			                ROUND (
			                    CALCULATE (
			                        [Ramped Capacity (Old)],
			                        ALL ( DimTeam ),
			                        DimTeam[Team] IN { "Enterprise", "Premium Standard" }
			                    ),
			                    0
			                ),
			                RampedCapacity
			            ),
			            RampedCapacity
			        )
			
			VAR FinalCapacity =
			        if(
			            ISBLANK(AdjustedCapacity),
			            CALCULATE( [Ramped Capacity], PREVIOUSMONTH ( CalendarDate[Date] ) ),
			            AdjustedCapacity
			        )
			RETURN FinalCapacity
		displayFolder: Headcount Measures
		lineageTag: 1181b984-5a2b-49fc-9573-de9b48fdbda8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Measure 5'
		displayFolder: RLS Measures Testing
		lineageTag: ff8724ee-b7d9-4c74-8c3f-ef0bbc2b7cfc

		annotation 43dbc3e8-3a1c-4b6f-9923-b49ff7d6691c = True

	measure 'Actual Capacity Gap (RLS)' = if([RLS Hide/Show]==1,[Actual Capacity Gap])
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: fc4c1af8-9272-49f7-b549-0e2ae7678c14

	measure 'Ramped Capacity (RLS)' = If([RLS Hide/Show]==1,[Ramped Capacity])
		displayFolder: RLS Measures Testing
		lineageTag: dd593f38-a6bf-4cda-b180-142a4f808f7f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Headcount Required (Premium Plus) (RLS)' = if([RLS Hide/Show]==1,[Headcount Required (Premium Plus)])
		displayFolder: RLS Measures Testing
		lineageTag: d613b6da-f840-4b69-8628-4df396eedfbc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'New Accounts (RLS)' = if([RLS Hide/Show]==1,sum('Fact_P+ net-new accounts'[new_accounts]))
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: 3efbe05e-bca3-4486-b437-a4f987da6996

	measure 'Ticket Forecast Variance (RLS)' = if([RLS Hide/Show]==1,[Forecast Variance])
		formatString: #,0.0%;-#,0.0%;#,0.0%
		displayFolder: RLS Measures Testing
		lineageTag: 9734d266-095d-4684-a0e9-a2f83b68a518

	measure 'Solved Ticket Count (RLS New)' = if([RLS Hide/Show]==1,[Solved Ticket Count])
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: 6cddb4bd-94fb-44a4-a9e8-c3b955477bb8

	measure 'New Hires (RLS)' = if([RLS Hide/Show]==1, [New Hires])
		formatString: #,0
		displayFolder: RLS Measures Testing
		lineageTag: 5903cffb-625e-4b59-a71d-0284467b17bc

	measure 'Headcount Required (RLS)' = if([RLS Hide/Show]==1,[Headcount Required])
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: 0358670f-96fa-4931-ba24-cd3eb03e6241

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Created Ticket Count (RLS New)' = if([RLS Hide/Show]==1,[Created Ticket Count])
		formatString: 0
		displayFolder: RLS Measures Testing
		lineageTag: d0f695b3-21b5-489b-8864-5f3099447a60

	measure 'Selected Month Text' = ```
			
			VAR SelectedMonth = SELECTEDVALUE(CalendarDate[Previous_Month_Column])
			VAR TotalSelected = COUNTROWS(ALLSELECTED(CalendarDate[Previous_Month_Column]))
			VAR TotalMonths = CALCULATE(DISTINCTCOUNT(CalendarDate[Previous_Month_Column]), ALL(CalendarDate))
			VAR PrevMonth = FORMAT(EDATE(TODAY(), -1), "MMM YYYY")
			
			RETURN
			SWITCH(
			    TRUE(),
			    ISBLANK(SelectedMonth), "Looking Back: Last 24 Months",
			    TotalSelected = TotalMonths, "Looking Back: Last 24 Months",
			    SelectedMonth = "Previous Month", "Looking Back: " & PrevMonth,
			    "Looking Back: " & SelectedMonth
			)
			
			```
		displayFolder: Count Measures
		lineageTag: 6049e0ba-1762-4fa3-820b-90049778a467

	measure 'Actual Capacity Gap Last 6 Months' = ```
			
			VAR SelectedDate = MAX(CalendarDate[Date])
			VAR DateMinus6 = EOMONTH(SelectedDate, -5) 
			VAR MonthYearMinus6 = FORMAT(DateMinus6, "YYYYMM")
			return 
			if( SELECTEDVALUE(NewMonthYearTable[MonthYear])>= MonthYearMinus6 && SELECTEDVALUE(NewMonthYearTable[MonthYear])<=FORMAT(SelectedDate, "YYYYMM"), calculate([Actual Capacity Gap], FORMAT(CalendarDate[Date], "YYYYMM") = SELECTEDVALUE(NewMonthYearTable[MonthYear])), BLANK())
			
			```
		displayFolder: Last 6 months data
		lineageTag: 6c8b67c5-1c59-4041-8068-08817bd75090

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Capacity Utilization Rate Last 6 Months' = ```
			
			VAR SelectedDate = MAX(CalendarDate[Date])
			VAR DateMinus6 = EOMONTH(SelectedDate, -5) 
			VAR MonthYearMinus6 = FORMAT(DateMinus6, "YYYYMM")
			return 
			if( SELECTEDVALUE(NewMonthYearTable[MonthYear])>= MonthYearMinus6 && SELECTEDVALUE(NewMonthYearTable[MonthYear])<=FORMAT(SelectedDate, "YYYYMM"), calculate([Capacity Utilization Rate], FORMAT(CalendarDate[Date], "YYYYMM") = SELECTEDVALUE(NewMonthYearTable[MonthYear])), BLANK())
			
			```
		displayFolder: Last 6 months data
		lineageTag: 14ddfb2d-c7d1-4e16-b04f-7bc4919bb4e7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Created Ticket Count Last 6 Months' = ```
			
			VAR SelectedDate = MAX(CalendarDate[Date])
			VAR DateMinus6 = EOMONTH(SelectedDate, -5) 
			VAR MonthYearMinus6 = FORMAT(DateMinus6, "YYYYMM")
			return 
			if( SELECTEDVALUE(NewMonthYearTable[MonthYear])>= MonthYearMinus6 && SELECTEDVALUE(NewMonthYearTable[MonthYear])<=FORMAT(SelectedDate, "YYYYMM"), calculate([Created Ticket Count], FORMAT(CalendarDate[Date], "YYYYMM") = SELECTEDVALUE(NewMonthYearTable[MonthYear])), BLANK())
			
			```
		formatString: 0
		displayFolder: Last 6 months data
		lineageTag: b096075e-da52-43d0-8f0d-07e429d34c0d

	measure 'Solved Ticket Count Last 6 Months' = ```
			
			VAR SelectedDate = MAX(CalendarDate[Date])
			VAR DateMinus6 = EOMONTH(SelectedDate, -5) 
			VAR MonthYearMinus6 = FORMAT(DateMinus6, "YYYYMM")
			return 
			if( SELECTEDVALUE(NewMonthYearTable[MonthYear])>= MonthYearMinus6 && SELECTEDVALUE(NewMonthYearTable[MonthYear])<=FORMAT(SelectedDate, "YYYYMM"), calculate([Solved Ticket Count], FORMAT(CalendarDate[Date], "YYYYMM") = SELECTEDVALUE(NewMonthYearTable[MonthYear])), BLANK())
			
			```
		formatString: 0
		displayFolder: Last 6 months data
		lineageTag: 271f681d-4333-405f-a692-bd6bb87ca89d

	measure 'Backlog Last day Month Last 6 Months' = ```
			
			VAR SelectedDate = MAX(CalendarDate[Date])
			VAR DateMinus6 = EOMONTH(SelectedDate, -5) 
			VAR MonthYearMinus6 = FORMAT(DateMinus6, "YYYYMM")
			return 
			if( SELECTEDVALUE(NewMonthYearTable[MonthYear])>= MonthYearMinus6 && SELECTEDVALUE(NewMonthYearTable[MonthYear])<=FORMAT(SelectedDate, "YYYYMM"), calculate([Backlog Last day Month], FORMAT(CalendarDate[Date], "YYYYMM") = SELECTEDVALUE(NewMonthYearTable[MonthYear])), BLANK())
			
			```
		formatString: 0
		displayFolder: Last 6 months data
		lineageTag: 5f7d2014-e02d-4e83-9528-9e2e63369d97

	measure 'Table Heading' = ```
			"Monthly Breakdown of " & MAX('Support Impact Category Heatmap'[Support Impact Category Heatmap]) &" by Standardized Category Name"
			
			```
		displayFolder: Count Measures
		lineageTag: 3cdaeaf3-757d-4b69-a813-b6d6dcb81e95

	measure 'Average Tickets per Customer' = ```
			
			// DIVIDE(
			//     DISTINCTCOUNT(FactTicket[ticket_id]),
			//     DISTINCTCOUNT(FactTicket[requester_zendesk_id])
			// )
			 
			// AVERAGEX(
			//     SUMMARIZE(FactTicket,FactTicket[requester_zendesk_id],"Count",DISTINCTCOUNT(FactTicket[ticket_id])),[Count]
			// )
			 
			DIVIDE(
			 
			    COUNTROWS(FactTicket),  -- Count the total number of tickets
			 
			    DISTINCTCOUNT(FactTicket[requester_zendesk_id])  -- Count the distinct number of customers
			 
			)
			```
		displayFolder: Average Measures
		lineageTag: cdad8309-9001-4807-a70d-3f9e60017454

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Unique Customer Count' =
			
			DISTINCTCOUNT(FactTicket[requester_zendesk_id])
		formatString: 0
		displayFolder: Average Measures
		lineageTag: 9de795c2-b4f3-46cf-acca-87dacdf7defa

	measure 'MoM % Change (Ticket Count)' = ```
			
			VAR CurrentMonthValue = [Ticket Count]
			VAR PreviousMonthValue = 
			    CALCULATE(
			        [Ticket Count],
			        DATEADD('CalendarDate'[Date], -1, MONTH)
			    )
			RETURN
			    DIVIDE(CurrentMonthValue - PreviousMonthValue, PreviousMonthValue, 0)
			
			```
		displayFolder: Count Measures
		lineageTag: 423b50bb-336c-4aed-b4b9-d4abd538bac2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Total Sessions' =
			
			CALCULATE(DISTINCTCOUNT(Fastly[SessionInterval]),
			KEEPFILTERS(
			     Fastly[begin_time] <= UTCNOW()
			                && Fastly[begin_time] >= UTCNOW()- SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: 73900fe4-2d59-4371-adb6-d2576ac44fde

	measure 'Unique IP addresses' =
			
			CALCULATE(DISTINCTCOUNT(Fastly[client_ip]),
			KEEPFILTERS(
			     Fastly[begin_time] <= UTCNOW()
			                && Fastly[begin_time] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: 3703f823-fa44-46de-bd69-45a2523d1bc6

	measure 'Requests Count' =
			
			CALCULATE(COUNTROWS(Fastly),
			KEEPFILTERS(
			     Fastly[begin_time] <= UTCNOW()
			                && Fastly[begin_time] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: f751d8b6-ed54-4dca-847a-419f5d11e63f

	measure AverageSessionsPerEngagedUser = ```
			
			VAR MaxDate = MAX(Fastly[begin_time])
			VAR LastMonthEnd  = EOMONTH(MaxDate, -1)
			
			VAR LastMonthStart = DATE(YEAR(LastMonthEnd), MONTH(LastMonthEnd), 1)
			
			// VAR FilteredData =
			//     FILTER(
			//         Fastly,
			//         Fastly[begin_time] >= LastMonthStart &&
			//         Fastly[begin_time] <= LastMonthEnd
			//     )
			// VAR SessionsPerUser =
			//     ADDCOLUMNS(
			//         SUMMARIZE(FilteredData, Fastly[client_ip]),
			//         "UserSessions", CALCULATE(DISTINCTCOUNT(Fastly[SessionInterval]))
			//     )
			// VAR FilteredUsers = 
			
			//     FILTER(SessionsPerUser, [UserSessions] > 1)
			
			// RETURN
			//      MaxDate & " " & LastMonthEnd&" " & LastMonthStart
			 ////////////////////////////////
			return 
			//MaxDate
			
			    AVERAGEX(
			        FILTER(
			            SUMMARIZE(
			               Fastly ,
			                Fastly[client_ip],
			                "Sessions", DISTINCTCOUNT(Fastly[SessionInterval])
			            ),
			            [Sessions] > 1
			        ),
			        [Sessions]
			    )
			```
		formatString: #,##0.00
		displayFolder: Support Documentations Page
		lineageTag: b1dcda02-a767-41e8-9545-9d2c0e3dfea9

	measure AverageSessionsPerUser = ```
			
			CALCULATE(
			    AVERAGEX(
			        SUMMARIZE(
			            Fastly,
			            Fastly[client_ip],
			            "Sessions",DISTINCTCOUNT(Fastly[SessionInterval])
			        ),
			        [Sessions]
			    )
			)
			
			
			
			
			
			```
		formatString: #,##0.00
		displayFolder: Support Documentations Page
		lineageTag: 761edec8-73af-4388-b37a-916f1fc01178

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure UniqueIPs =
			CALCULATE(DISTINCTCOUNT(Fastly[client_ip]),
			KEEPFILTERS(
			     Fastly[begin_time] <= UTCNOW()
			                && Fastly[begin_time] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: 3ea64bee-41c0-433f-b5b3-785fbf91e627

	measure View =
			CALCULATE(COUNTROWS('Referrer paths'),
			KEEPFILTERS(
			   'Referrer paths'[timestamp]<= UTCNOW()
			                && 'Referrer paths'[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: bc758b57-1eac-408f-8623-940f11bd92e9

	measure CountModificationsWeekly = ```
			
			CALCULATE(
			    COUNTROWS(GithubV1PullRequestMerge),
			    GithubV1PullRequestMerge[StatusType] = "MODIFICATION"
			)
			
			```
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: cb450022-97aa-47e2-980c-73690cb1ab32

	measure Countrows = ```
			
			CALCULATE(COUNTROWS(GithubV1PullRequestMerge),
			KEEPFILTERS(
			     GithubV1PullRequestMerge[timestamp] <= UTCNOW()
			                && GithubV1PullRequestMerge[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
			
			```
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: a9f60395-6a0e-4e1e-8ad1-cd4e942bb1a1

	measure 'Total files changed' = ```
			
			VAR FileChangeCount =
			    CALCULATE(
			        DISTINCTCOUNT(GithubV1PullRequestMerge[FilePath]),
			        KEEPFILTERS(
			            GithubV1PullRequestMerge[timestamp] <= UTCNOW()
			                && GithubV1PullRequestMerge[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			        )
			    )
			RETURN
			    IF(ISBLANK(FileChangeCount), 0, FileChangeCount)
			
			```
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: 4c2a3ed4-69f5-4039-8413-202af579b304

	measure UniqueChangeTypes =
			CALCULATE(CONCATENATEX(
			    (GithubV1PullRequestMerge),
			    GithubV1PullRequestMerge[ChangeType],
			    ",",
			    GithubV1PullRequestMerge[DateModified],,GithubV1PullRequestMerge[FilePath]
			),
			  GithubV1PullRequestMerge[timestamp] <= UTCNOW()
			                && GithubV1PullRequestMerge[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			)
		displayFolder: Support Documentations Page
		lineageTag: 843575fa-4003-49e5-8814-5d5750808a33

	measure WeekStartDateMeasureFormatted = ```
			
			VAR MinTimestamp = MIN(GithubV1PullRequestMerge[timestamp])
			VAR WeekStart = MinTimestamp - WEEKDAY(MinTimestamp, 2) + 1
			RETURN
			FORMAT(WeekStart, "yyyy-MM-dd")
			
			```
		displayFolder: Support Documentations Page
		lineageTag: 8715bb04-9f61-4062-8b9a-264b6473525e

	measure ArticlesList = ```
			
			CONCATENATEX(
			  (GithubV1PullRequestMerge),
			    GithubV1PullRequestMerge[FilePath],
			    ",",
			   GithubV1PullRequestMerge[username],
			)
			
			```
		displayFolder: Support Documentations Page
		lineageTag: 5914dce5-3fab-497f-b262-53da95a8a606

	measure Total = ```
			
			VAR ArticleString = 
			[ArticlesList]
			VAR CommaCount = LEN(ArticleString) - LEN(SUBSTITUTE(ArticleString, ",", ""))
			RETURN
			    IF(
			        LEN(ArticleString) = 0,
			        0,
			        CommaCount + 1
			    )
			
			```
		formatString: #,0
		displayFolder: Support Documentations Page
		lineageTag: 60843ba2-aa3b-4439-8043-da9a289dfe56

	measure 'Total Unique Contributors' =
			CALCULATE(DISTINCTCOUNT(GithubV1PullRequestMerge[username]),
			KEEPFILTERS(
			     GithubV1PullRequestMerge[timestamp] <= UTCNOW()
			                && GithubV1PullRequestMerge[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			))
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: d4e3c50a-f3b9-4f54-9fa5-7dd1c43aba77

	measure Views = ```
			
			CALCULATE(
			    COUNTROWS(analytics_v0_browser_event)
			
			)
			
			```
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: 1c1a0e21-ef60-406c-acea-8c8c798a8959

	measure ReferrerCount = ```
			COUNTROWS(FILTER('analytics_v0_browser_event', NOT(ISBLANK(analytics_v0_browser_event[Referrer]))))
			
			```
		formatString: #,##0
		displayFolder: Support Documentations Page
		lineageTag: b8682ffd-f0b4-42ea-b7f6-fdedd4b1c871

	measure Referrals1 =
			
			CALCULATE(
			    SUM(Referrals_ZD[Referrals]),
			    KEEPFILTERS(
			        Referrals_ZD[timestamp] <= UTCNOW()
			            && Referrals_ZD[timestamp] >= UTCNOW() - SELECTEDVALUE('Table'[Value])
			    )
			)
		formatString: #,0
		displayFolder: Support Documentations Page
		lineageTag: 39e518a0-1391-4c5c-87b1-6151973efd1d

	measure 'count rows zendesk' = CALCULATE(sum(Referrals_ZD[Referrals]),KEEPFILTERS(Referrals_ZD[timestamp]<=UTCNOW() && Referrals_ZD[timestamp]>=UTCNOW() - SELECTEDVALUE('Table'[Value])))
		formatString: #,0
		displayFolder: Support Documentations Page
		lineageTag: 19ee142c-9b71-4d93-bfae-15d58ef0cbfd

	measure 'Average Time waiting for a Reply' = ```
			
			VAR TotalMinutes = 
			    CALCULATE(
			        SUM(FactTicket[TicketAgeInHours]),
			        USERELATIONSHIP(DimProductTicketBridge[Ticket ID], FactTicketComment[ticket_id]),
			        FactTicketComment[Public Comments] = 0,
			        DimTicketComment[Author Role] = "agent",
			        DimTicket[Status] in {"Open", "New"}
			    )
			
			VAR TicketCount = 
			    CALCULATE(
			        COUNT(FactTicket[ticket_id]),
			        USERELATIONSHIP(DimProductTicketBridge[Ticket ID], FactTicketComment[ticket_id]),
			        FactTicketComment[Public Comments] = 0,
			        DimTicketComment[Author Role] = "agent",
			        DimTicket[Status] in {"Open", "New"}
			    )
			
			RETURN 
			    DIVIDE(TotalMinutes, TicketCount)
			```
		displayFolder: Average Measures
		lineageTag: d9744308-4f34-4302-a1f6-f54ba7a90e54

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Average Reply Time Initial Response' = Average(FactTicket[Reply time Initial Response])/60
		formatString: #,0
		displayFolder: Average Measures
		lineageTag: 9758f5e8-423a-4d18-81e2-f1e2daf9840e

	partition Measure-1e5d9a4f-d092-4ce4-b904-93f97494fa2b = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	changedProperty = IsHidden

	annotation PBI_ResultType = Table

	annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["ENSURE_TABLES_HAVE_RELATIONSHIPS","OBJECTS_WITH_NO_DESCRIPTION","PARTITION_NAME_SHOULD_MATCH_TABLE_NAME_FOR_SINGLE_PARTITION_TABLES"]}

	annotation PBI_NavigationStepName = Navigation

